// this is your game's Cellscript, used to instruct the Cell compiler how to
// build your game.  like a Sphere game, the Cellscript is written in
// JavaScript, however with a different set of functions tailored for compiling
// and packaging games.


// describe the game we're building.  everything in Sphere.Game gets written to
// the game manifest (game.json) at the end of the build.

Object.assign(Sphere.Game, {{
	name: "{0}",
	author: "{1}",
	summary: "{2}",
	resolution: '{3}x{4}',
	main: '@/bin/main.mjs',
}});


// this tells Cell which files to copy from the source tree when packaging the
// game.  see the Cell API documentation for more information.  in general:
//
//     install(destDir, files(filter[, recursive]));
//
// note: path qualifier `@/` is required to specify a file or directory within
//       the game package being built.  in Cell, a bare path, e.g.
//       `path/to/file`, is relative to the location of the Cellscript, not the
//       game's JSON manifest like in Sphere.

install('@/bin', files('src/*.mjs'));
install('@/bin', files('src/*.js'));

install('@/images', files('images/*.png', true));
install('@/music',  files('music/*.ogg', true));
install('@/',       files('icon.png'));
