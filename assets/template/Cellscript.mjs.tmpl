// this is your game's Cellscript, used to instruct the Cell compiler how to
// build your game.  like a Sphere game, the Cellscript is written in
// JavaScript, however with a different set of bindings tailored for compiling
// and packaging games.


// import any stuff we need.  note that Cellscripts are automatically run
// through the Babel transpiler if needed, so it's okay to use ES 2015 syntax
// in a Cellscript if you want.

import {{ transpile }} from 'compiler';


// describe the game we're building.  this gets written to the game manifest
// (game.json) at the end of the build.

describe("{0}", {{
	version: 2,  // Sphere v2
	author: "{1}",
	summary: "{2}",
	resolution: '{3}x{4}',
	main: 'scripts/main.js',
}});


// minisphere doesn't natively support ECMAScript 2015; if our scripts use any
// new JavaScript features such as destructuring, minisphere won't be able to
// run them.  to get around that, we can have Cell transpile the scripts.
//
// note: transpile() creates one target file for each source file.  this is why
//       it takes a directory as its first argument rather than a filename.
//       install() works similarly (see below).

transpile('@/scripts/', files('src/*.mjs'));
transpile('@/scripts/', files('src/*.js'));


// this tells Cell which files to copy from the source tree when packaging the
// game.  see the Cell API documentation for more information.  in general:
//
//     install(destDir, files(filter[, recursive]));
//
// note: path qualifier `@/` is required to specify a file or directory within
//       the game package being built.  in Cell, a bare path, e.g.
//       `path/to/file`, is relative to the location of the Cellscript, not the
//       game's JSON manifest like in Sphere.

install('@/images/', files('images/*.png', true));
install('@/',        files('icon.png'));
