// this is your game's Cellscript, used to instruct the Cell compiler how to
// build your game.  like a Sphere game, the Cellscript is written in
// JavaScript, however with a different set of bindings tailored for compiling
// and packaging games.


// require() pulls in the libraries we need.
const transpile = require('transpile');


// describe the game we're building.  this gets written to the game manifest
// (game.json) at the end of the build.

describe("{0}", {
	version: 2,  // Sphere v2
	author: "{1}",
	summary: "{2}",
	resolution: '{3}x{4}',
	main: 'scripts/main.js',
}}));


// the scripts are written in TypeScript; we need to compile them to JavaScript
// before the engine can run them.
//
// note: transpile() creates one target file for each TypeScript source file.
//       this is why it takes a directory as its first argument rather than
//       a filename.  install() works similarly (see below).

transpile('@/scripts/', files('src/*.ts'));


// this tells Cell which files to copy from the source tree when packaging the
// game.  see the Cell API documentation for more information.  in general:
//     install(destDir, files(filter[, recursive]));
//
// note: path qualifier `@/` is required to specify file or directory within
//       the game package being built.  in Cell, a bare path, e.g.
//       `path/to/file`, is relative to the location of the Cellscript, not the
//       game's JSON manifest like in Sphere.

install('@/images/', files('images/*.png', true));
install('@/', files('icon.png'));
