<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sphere.Plugins</name>
    </assembly>
    <members>
        <member name="T:Sphere.Plugins.Interfaces.ICompiler">
            <summary>
            Specifies the base interface for a compiler.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.ICompiler.Prep(Sphere.Plugins.Interfaces.IProject,Sphere.Plugins.Interfaces.IConsole)">
            <summary>
            Prepare a new project for use with this compiler.
            </summary>
            <param name="project">The project to prepare.</param>
            <param name="con">An IConsole where project prep progress can be printed.</param>
            <returns>true if the project was successfully prepared.</returns>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.ICompiler.Build(Sphere.Plugins.Interfaces.IProject,System.String,Sphere.Plugins.Interfaces.IConsole)">
            <summary>
            Builds a game distribution from a Sphere Studio project.
            </summary>
            <param name="project">The project to build.</param>
            <param name="outPath">The pathname of the directory where the distribution will be created.</param>
            <param name="con">An IConsole where compiler output will be sent.</param>
            <returns>'true' if compilation succeeded, false if not.</returns>
        </member>
        <member name="T:Sphere.Plugins.Interfaces.IPackager">
            <summary>
            Specifies the interface for a packaging compiler.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Interfaces.IPackager.SaveFileFilters">
            <summary>
            Gets a list of package file filters, in the same format as used for
            SaveFileDialog.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.IPackager.Package(Sphere.Plugins.Interfaces.IProject,System.String,Sphere.Plugins.Interfaces.IConsole)">
            <summary>
            Builds a game package from a Sphere Studio project.
            </summary>
            <param name="project">The project to build.</param>
            <param name="fileName">The pathname of the package. If this file exists, it will be overwritten.</param>
            <param name="con">An IConsole where compiler output will be sent.</param>
            <returns>'true' if packaging succeeded, false if not.</returns>
        </member>
        <member name="T:Sphere.Plugins.Interfaces.IConsole">
            <summary>
            Specifies the interface for a text console, as used for, e.g.
            the build system.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.IConsole.Print(System.String)">
            <summary>
            Prints text to the console. Newlines must be printed manually.
            </summary>
            <param name="text">The text to be printed.</param>
        </member>
        <member name="T:Sphere.Plugins.Interfaces.DockHint">
            <summary>
            Specifies the position of a dock pane.
            </summary>
        </member>
        <member name="F:Sphere.Plugins.Interfaces.DockHint.Float">
            <summary>
            Detaches the pane, making it floating.
            </summary>
        </member>
        <member name="F:Sphere.Plugins.Interfaces.DockHint.Left">
            <summary>
            Docks the pane to the left side.
            </summary>
        </member>
        <member name="F:Sphere.Plugins.Interfaces.DockHint.Right">
            <summary>
            Docks the pane to the right side.
            </summary>
        </member>
        <member name="F:Sphere.Plugins.Interfaces.DockHint.Top">
            <summary>
            Docks the pane to the top.
            </summary>
        </member>
        <member name="F:Sphere.Plugins.Interfaces.DockHint.Bottom">
            <summary>
            Docks the pane to the bottom.
            </summary>
        </member>
        <member name="T:Sphere.Plugins.Interfaces.IDockPane">
            <summary>
            Specifies the interface for an IDE dock pane.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Interfaces.IDockPane.Control">
            <summary>
            Gets the physical Control providing functionality for this dock pane.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Interfaces.IDockPane.DockHint">
            <summary>
            Gets the dock pane's preferred docking position.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Interfaces.IDockPane.DockIcon">
            <summary>
            Gets the icon associated with this dock pane.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Interfaces.IDockPane.ShowInViewMenu">
            <summary>
            Gets whether this dock pane should be shown in the View menu.
            </summary>
        </member>
        <member name="T:Sphere.Plugins.Interfaces.IEditor`1">
            <summary>
            Specifies the interface for an embedded editor.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.IEditor`1.CreateEditView">
            <summary>
            Creates a new embeddable DocumentView for this editor.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sphere.Plugins.Interfaces.IFileOpener">
            <summary>
            Specifies the interface for a file opener.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Interfaces.IFileOpener.FileExtensions">
            <summary>
            Gets the set of file extensions handled by this plugin (sans dots).
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Interfaces.IFileOpener.FileTypeName">
            <summary>
            Gets the name of the type of file created by this plugin.
            e.g. "Image"
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Interfaces.IFileOpener.FileIcon">
            <summary>
            Gets the icon used for file types handled by this plugin.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.IFileOpener.Open(System.String)">
            <summary>
            Opens an existing file.
            </summary>
            <param name="fileName">The filename of the asset to edit.</param>
            <returns>The DocumentView used for editing the file, or null if no document view is needed.</returns>
        </member>
        <member name="T:Sphere.Plugins.Interfaces.INewFileOpener">
            <summary>
            Specifies the interface for a file opener supporting new document creation.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.INewFileOpener.New">
            <summary>
            Creates a new, untitled file.
            </summary>
            <returns>The DocumentView for the new file, or null to cancel document creation.</returns>
        </member>
        <member name="T:Sphere.Plugins.Interfaces.IPlugin">
            <summary>
            Specifies the base interface for a Sphere Studio plugin.
            </summary>
        </member>
        <member name="T:Sphere.Plugins.Interfaces.ISettingsPage">
            <summary>
            Specifies the interface for a Settings Center page.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Interfaces.ISettingsPage.Control">
            <summary>
            Gets the physical UserControl for this settings page.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.ISettingsPage.Apply">
            <summary>
            Applies the settings selected on this settings page.
            </summary>
            <returns>true if the settings were applied successfully.</returns>
        </member>
        <member name="T:Sphere.Plugins.Interfaces.IStarter">
            <summary>
            Specifies the interface for an engine starter. Starters handle launching
            an engine with the proper command line arguments, etc.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Interfaces.IStarter.CanConfigure">
            <summary>
            'true' if this engine supports configuration.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.IStarter.Start(System.String,System.Boolean)">
            <summary>
            Starts the engine.
            </summary>
            <param name="gamePath">The pathname of the game or package to launch.</param>
            <param name="isPackage">Pass 'true' if gamePath specifies a package.</param>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.IStarter.Configure">
            <summary>
            Launches the engine's configuration program. Throws an error if the
            engine doesn't support this.
            </summary>
        </member>
        <member name="T:Sphere.Plugins.Interfaces.IDebugStarter">
            <summary>
            Specifies the interface for an engine starter supporting single-step
            debugging.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.IDebugStarter.Debug(System.String,System.Boolean,Sphere.Plugins.Interfaces.IProject)">
            <summary>
            Starts the engine in single-step debugging mode.
            </summary>
            <param name="gamePath">The pathname of the game or package to launch.</param>
            <param name="isPackage">Pass 'true' if gamePath specifies a package.</param>
            <param name="project">The Sphere Studio project hosting the debugger.</param>
            <returns></returns>
        </member>
        <member name="T:Sphere.Plugins.Interfaces.PauseReason">
            <summary>
            Specifies the reason debug execution was halted.
            </summary>
        </member>
        <member name="F:Sphere.Plugins.Interfaces.PauseReason.Breakpoint">
            <summary>
            A breakpoint was triggered.
            </summary>
        </member>
        <member name="F:Sphere.Plugins.Interfaces.PauseReason.Exception">
            <summary>
            An exception is about to be thrown.
            </summary>
        </member>
        <member name="T:Sphere.Plugins.Interfaces.PausedEventArgs">
            <summary>
            Specifies data for a Paused debugger event.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.PausedEventArgs.#ctor(Sphere.Plugins.Interfaces.PauseReason)">
            <summary>
            Constructs data for a Paused debugger event.
            </summary>
            <param name="reason"></param>
        </member>
        <member name="P:Sphere.Plugins.Interfaces.PausedEventArgs.Reason">
            <summary>
            Gets the reason execution was halted.
            </summary>
        </member>
        <member name="T:Sphere.Plugins.Interfaces.IDebugger">
            <summary>
            Specifies the interface for a single-step debugger.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Interfaces.IDebugger.FileName">
            <summary>
            Gets the fully qualified path of the source file currently being
            executed.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Interfaces.IDebugger.LineNumber">
            <summary>
            Gets the line number of the next instruction to be executed.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Interfaces.IDebugger.Running">
            <summary>
            Gets whether the debuggee is currently executing.
            </summary>
        </member>
        <member name="E:Sphere.Plugins.Interfaces.IDebugger.Attached">
            <summary>
            Fires when the debugger is successfully attached.
            </summary>
        </member>
        <member name="E:Sphere.Plugins.Interfaces.IDebugger.Detached">
            <summary>
            Fires when the debugger is detached.
            </summary>
        </member>
        <member name="E:Sphere.Plugins.Interfaces.IDebugger.Resumed">
            <summary>
            Fires when execution resumes.
            </summary>
        </member>
        <member name="E:Sphere.Plugins.Interfaces.IDebugger.Paused">
            <summary>
            Fires when execution pauses (e.g. at a breakpoint).
            </summary>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.IDebugger.Attach">
            <summary>
            Attaches the debugger.
            </summary>
            <returns>true if the debugger was successfully attached.</returns>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.IDebugger.Detach">
            <summary>
            Detaches the debugger.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.IDebugger.SetBreakpoint(System.String,System.Int32)">
            <summary>
            Sets a breakpoint on a line of code.
            </summary>
            <param name="fileName">The name of the source file containing the breakpoint.</param>
            <param name="lineNumber">The line number of the breakpoint.</param>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.IDebugger.ClearBreakpoint(System.String,System.Int32)">
            <summary>
            Clears an existing breakpoint on a line of code.
            </summary>
            <param name="fileName">The name of the source file containing the breakpoint.</param>
            <param name="lineNumber">The line number of the breakpoint.</param>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.IDebugger.Resume">
            <summary>
            Runs until the next breakpoint is hit or the target terminates,
            whichever comes first.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.IDebugger.Pause">
            <summary>
            Pauses execution and breaks into the debugger.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.IDebugger.StepInto">
            <summary>
            Executes the next line of code, stepping into function calls.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.IDebugger.StepOut">
            <summary>
            Runs until the current function returns.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.IDebugger.StepOver">
            <summary>
            Executes the next line of code.
            </summary>
        </member>
        <member name="T:Sphere.Plugins.Interfaces.ICore">
            <summary>
            Specifies an interface for communication with the Sphere Studio IDE.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Interfaces.ICore.Settings">
            <summary>
            Provides access to the Sphere Studio core settings.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Interfaces.ICore.Project">
            <summary>
            Provides access to the project settings.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Interfaces.ICore.ActiveDocument">
            <summary>
            Gets the DocumentView of the document being edited.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Interfaces.ICore.Docking">
            <summary>
            Gets the interface to the IDE dock manager.
            </summary>
        </member>
        <member name="E:Sphere.Plugins.Interfaces.ICore.LoadProject">
            <summary>
            Fires when a project is loaded into the IDE.
            </summary>
        </member>
        <member name="E:Sphere.Plugins.Interfaces.ICore.UnloadProject">
            <summary>
            Fires when an open project is closed.
            </summary>
        </member>
        <member name="E:Sphere.Plugins.Interfaces.ICore.TestGame">
            <summary>
            Fires when the Test Game or Debug commands are chosen.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.ICore.AddMenuItem(System.Windows.Forms.ToolStripMenuItem,System.String)">
            <summary>
            Add a new root level item to the Sphere Studio menu bar.
            </summary>
            <param name="item">The ToolStripMenuItem to add.</param>
            <param name="before">The name of the item you want to appear before, or none</param>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.ICore.AddMenuItem(System.String,System.Windows.Forms.ToolStripItem)">
            <summary>
            Add a new item to a sub-menu of the Sphere Studio menu bar.
            </summary>
            <param name="location">Ex: 'View' or 'View.extra1.extra2'</param>
            <param name="newItem">The ToolStripMenuItem to add.</param>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.ICore.RemoveMenuItem(System.Windows.Forms.ToolStripItem)">
            <summary>
            Removes the menu item from it's containing drop down menu.
            </summary>
            <param name="item">The ToolStripMenuItem to remove.</param>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.ICore.RemoveMenuItem(System.String)">
            <summary>
            Removes a root level menu item with the associated name.
            </summary>
            <param name="name">The name of the item to remove; Ex: 'View'.</param>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.ICore.OpenFile(System.String)">
            <summary>
            Opens a file as a document in the IDE.
            </summary>
            <param name="fileName">The full path of the file to open.</param>
            <returns>The DocumentView for the opened file.</returns>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.ICore.Refresh">
            <summary>
            Refreshes the Sphere Studio UI.
            </summary>
        </member>
        <member name="T:Sphere.Plugins.Interfaces.ICoreSettings">
            <summary>
            Specifies the interface for ICore.Settings.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Interfaces.ICoreSettings.ProjectPaths">
            <summary>
            Gets the list of directory paths Sphere Studio is monitoring for projects.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Interfaces.ICoreSettings.Engine">
            <summary>
            Gets the registered name of the current engine starter plugin.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Interfaces.ICoreSettings.Compiler">
            <summary>
            Gets the registered name of the current compiler plugin.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Interfaces.ICoreSettings.FileOpener">
            <summary>
            Gets the registered name of the current default file opener plugin.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Interfaces.ICoreSettings.ScriptEditor">
            <summary>
            Gets the registered name of the current script editor plugin.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Interfaces.ICoreSettings.ImageEditor">
            <summary>
            Gets the registered name of the current image editor plugin.
            </summary>
        </member>
        <member name="T:Sphere.Plugins.Interfaces.IDock">
            <summary>
            Specifies the interface for the dock panel manager.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.IDock.Refresh">
            <summary>
            Refreshes the dock and updates it with any new and removed panes.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.IDock.Hide(Sphere.Plugins.Interfaces.IDockPane)">
            <summary>
            Hides a registered dock pane. If it is already hidden, does nothing.
            </summary>
            <param name="pane">The dock pane to hide.</param>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.IDock.Show(Sphere.Plugins.Interfaces.IDockPane)">
            <summary>
            Shows a registered dock pane. If it is already visible, does nothing.
            </summary>
            <param name="pane">The dock pane to show.</param>
        </member>
        <member name="T:Sphere.Plugins.Interfaces.IProject">
            <summary>
            Specifies the interface for a Sphere Studio project.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Interfaces.IProject.RootPath">
            <summary>
            Gets the absolute path of the project's root directory.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Interfaces.IProject.BuildPath">
            <summary>
            Gets or sets the path of the build directory. May be a
            relative path.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Interfaces.IProject.Name">
            <summary>
            Gets or sets the name of the project (usually the game title).
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Interfaces.IProject.Author">
            <summary>
            Gets or sets the name of the project's author.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Interfaces.IProject.Summary">
            <summary>
            Gets or sets a short summary/description of the game.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Interfaces.IProject.ScreenWidth">
            <summary>
            Gets or sets the game's default horizontal resolution.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Interfaces.IProject.ScreenHeight">
            <summary>
            Gets or sets the game's default vertical resolution.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Interfaces.IProject.MainScript">
            <summary>
            Gets the filename of the game's startup script, relative to
            'scripts'.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.IProject.GetAllBreakpoints">
            <summary>
            Gets a dictionary of all breakpoints set for this project.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.IProject.GetBreakpoints(System.String)">
            <summary>
            Gets a list of breakpoints set for a specified file.
            </summary>
            <param name="scriptPath">The fully qualified path of the script to get breakpoints for.</param>
            <returns>An array of line numbers containing breakpoints.</returns>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.IProject.SetBreakpoints(System.String,System.Int32[])">
            <summary>
            Records breakpoints for a specified script file.
            </summary>
            <param name="scriptPath">The fully qualified path of the script with breakpoints.</param>
            <param name="lineNumbers">An array of line numbers with breakpoints.</param>
        </member>
        <member name="T:Sphere.Plugins.Interfaces.ISettings">
            <summary>
            Specifies an interface for reading and writing configuration settings.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.ISettings.GetBoolean(System.String,System.Boolean)">
            <summary>
            Reads a boolean value from the settings.
            </summary>
            <param name="key">The name of the setting.</param>
            <param name="defValue">A default value if the setting doesn't exist.</param>
            <returns></returns>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.ISettings.GetFloat(System.String,System.Double)">
            <summary>
            Reads a floating-point value from the settings.
            </summary>
            <param name="key">The name of the setting.</param>
            <param name="defValue">A default value if the setting doesn't exist.</param>
            <returns></returns>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.ISettings.GetInteger(System.String,System.Int32)">
            <summary>
            Reads an integer value from the settings.
            </summary>
            <param name="key">The name of the setting.</param>
            <param name="defValue">A default value if the setting doesn't exist.</param>
            <returns></returns>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.ISettings.GetString(System.String,System.String)">
            <summary>
            Reads a string value from the settings.
            </summary>
            <param name="key">The name of the setting.</param>
            <param name="defValue">A default value if the setting doesn't exist.</param>
            <returns></returns>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.ISettings.GetStringArray(System.String,System.String[])">
            <summary>
            Reads a list of comma-separated strings from the settings.
            </summary>
            <param name="key">The name of the setting.</param>
            <param name="defValues">A default array to return if the setting doesn't exist.</param>
        </member>
        <member name="M:Sphere.Plugins.Interfaces.ISettings.SetValue(System.String,System.Object)">
            <summary>
            Writes a value to the settings.
            </summary>
            <param name="key">The name of the setting.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="T:Sphere.Plugins.Views.DocumentView">
            <summary>
            Provides a base class for editable documents in Sphere Studio.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Views.DocumentView.CanSave">
            <summary>
            Gets whether the DocumentView contains saveable content.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Views.DocumentView.IsDirty">
            <summary>
            Gets whether the document has been edited since the last save.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Views.DocumentView.HelpText">
            <summary>
            Gets or sets the help text shown in the status bar when this document is
            active. Setter is protected.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Views.DocumentView.FileExtensions">
            <summary>
            Gets the recommended file extension (sans dot) when saving the document.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Views.DocumentView.Icon">
            <summary>
            Gets the icon associated with the document.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Views.DocumentView.ReadOnly">
            <summary>
            Gets or sets whether the document contents are read-only.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Views.DocumentView.ViewState">
            <summary>
            Gets or sets the current view state of the document. (e.g. caret position,
            current selection, etc.)
            </summary>
        </member>
        <member name="E:Sphere.Plugins.Views.DocumentView.DirtyChanged">
            <summary>
            Fires when the document's 'dirty' status changes.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.Views.DocumentView.NewDocument">
            <summary>
            Sets up the document view for a new file.
            </summary>
            <returns>true if a fresh slate was set up, false otherwise.</returns>
        </member>
        <member name="M:Sphere.Plugins.Views.DocumentView.Load(System.String)">
            <summary>
            Loads a file into the document view.
            </summary>
            <param name="filename">The filename of the file to load.</param>
        </member>
        <member name="M:Sphere.Plugins.Views.DocumentView.Save(System.String)">
            <summary>
            Saves the contents of the document to a specified filename.
            </summary>
            <param name="filename">The filename to save under.</param>
        </member>
        <member name="M:Sphere.Plugins.Views.DocumentView.Restyle">
            <summary>
            Refreshes the document when the UI style has changed.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.Views.DocumentView.Activate">
            <summary>
            Notifies the document that it received focus.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.Views.DocumentView.Deactivate">
            <summary>
            Notifies the document that it lost focus.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.Views.DocumentView.Cut">
            <summary>
            Deletes the selected content and puts it on the clipbord.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.Views.DocumentView.Copy">
            <summary>
            Copies the current selection to the clipboard.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.Views.DocumentView.Paste">
            <summary>
            Pastes the contents of the clipboard into the document.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.Views.DocumentView.Undo">
            <summary>
            Undoes the user's last modification to the document.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.Views.DocumentView.Redo">
            <summary>
            Reverts the last Undo operation. If the document has been modified since the
            last Undo, this does nothing.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.Views.DocumentView.ZoomIn">
            <summary>
            Increases the document zoom level.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.Views.DocumentView.ZoomOut">
            <summary>
            Decreases the document zoom level.
            </summary>
        </member>
        <member name="T:Sphere.Plugins.Views.ImageView">
            <summary>
            Provides a base class for an image editing component.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Views.ImageView.IsDirty">
            <summary>
            Gets or sets whether the image has been modified.
            </summary>
        </member>
        <member name="E:Sphere.Plugins.Views.ImageView.ImageChanged">
            <summary>
            Raised when the image data has been modified.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Views.ImageView.Content">
            <summary>
            Gets or sets the image as it is shown in the document.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.Views.ImageView.GetImages(System.Int16,System.Int16)">
            <summary>
            Splits the image editor content into tiles and returns the tile bitmaps
            in an array.
            </summary>
            <param name="tileWidth">The width of the tiles.</param>
            <param name="tileHeight">The height of the tiles.</param>
            <returns>An array of tile bitmaps.</returns>
        </member>
        <member name="T:Sphere.Plugins.Views.ScriptView">
            <summary>
            Provides a base class for a script editing component.
            </summary>
        </member>
        <member name="E:Sphere.Plugins.Views.ScriptView.BreakpointChanged">
            <summary>
            Fires when a breakpoint is added or removed.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Views.ScriptView.ActiveLine">
            <summary>
            Gets or sets the active line, used while debugging.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Views.ScriptView.ErrorLine">
            <summary>
            Gets or sets  the error line, used to point out script errors
            during debugging.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Views.ScriptView.Breakpoints">
            <summary>
            Gets a list of the line numbers of all breakpoints
            set in this script view.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Views.ScriptView.Text">
            <summary>
            Gets or sets the contents of the script view.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.Views.ScriptView.GoToLine(System.Int32)">
            <summary>
            Moves the cursor to a specified line number, used when debugging.
            </summary>
            <param name="lineNumber">The line number to navigate to.</param>
        </member>
        <member name="M:Sphere.Plugins.Views.ScriptView.OnBreakpointChanged(Sphere.Plugins.Views.BreakpointChangedEventArgs)">
            <summary>
            Fires a BreakpointChanged event for this ScriptView.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Sphere.Plugins.Views.BreakpointChangedEventArgs">
            <summary>
            Contains data for a BreakpointChanged event.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.Views.BreakpointChangedEventArgs.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes data for a BreakpointSet event.
            </summary>
            <param name="lineNumber"></param>
            <param name="isActive"></param>
        </member>
        <member name="P:Sphere.Plugins.Views.BreakpointChangedEventArgs.Active">
            <summary>
            If Active is true, the breakpoint is set. Otherwise it is cleared.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.Views.BreakpointChangedEventArgs.LineNumber">
            <summary>
            The line number containing the breakpoint.
            </summary>
        </member>
        <member name="T:Sphere.Plugins.IPluginMain">
            <summary>
            Specifies the interface for a Sphere Studio plugin module.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.IPluginMain.Name">
            <summary>
            Gets the display name of the plugin.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.IPluginMain.Author">
            <summary>
            Gets the name(s) of the plugin's author(s).
            </summary>
        </member>
        <member name="P:Sphere.Plugins.IPluginMain.Description">
            <summary>
            Gets a one-line description of the plugin.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.IPluginMain.Version">
            <summary>
            Gets the plugin's version number string.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.IPluginMain.Initialize(Sphere.Plugins.Interfaces.ISettings)">
            <summary>
            Initializes the module. Called by the plugin manager when the plugin is loaded.
            </summary>
            <param name="conf">Allows access to the plugin's user configuration.</param>
        </member>
        <member name="M:Sphere.Plugins.IPluginMain.ShutDown">
            <summary>
            Shuts down the module. Called by the plugin manager when the plugin is unloaded.
            </summary>
        </member>
        <member name="T:Sphere.Plugins.PluginManager">
            <summary>
            Manages Sphere Studio plugins. This is a singleton.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.PluginManager.Register(Sphere.Plugins.IPluginMain,Sphere.Plugins.Interfaces.IPlugin,System.String)">
            <summary>
            Registers a plugin. Plugins add new functionality to the IDE.
            </summary>
            <param name="main">The plugin module doing the registering.</param>
            <param name="plugin">The IPlugin to register.</param>
            <param name="name">The friendly name of the compiler, used in the UI.</param>
        </member>
        <member name="M:Sphere.Plugins.PluginManager.Unregister(Sphere.Plugins.Interfaces.IPlugin)">
            <summary>
            Unregisters a previously registered plugin.
            </summary>
            <param name="plugin">The plugin to unregister.</param>
        </member>
        <member name="M:Sphere.Plugins.PluginManager.UnregisterAll(Sphere.Plugins.IPluginMain)">
            <summary>
            Unregisters all plugins registered by a plugin module.
            </summary>
            <param name="main">The plugin module whose plugins are being unregistered.</param>
        </member>
        <member name="M:Sphere.Plugins.PluginManager.GetNames``1">
            <summary>
            Gets the registered names of all active plugins of a given type.
            </summary>
            <typeparam name="T">The type of plugin to get the names of.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Sphere.Plugins.PluginManager.Get``1(System.String)">
            <summary>
            Searches for a plugin by name and returns its interface.
            </summary>
            <typeparam name="T">The type of plugin being requested.</typeparam>
            <param name="name">The registered name of the plugin to find.</param>
            <returns></returns>
        </member>
        <member name="P:Sphere.Plugins.PluginManager.Core">
            <summary>
            Gets the interface to the Sphere Studio IDE.
            </summary>
        </member>
        <member name="T:Sphere.Plugins.EditShims.ImageEditShim">
            <summary>
            Defers image editing functionality to the active Image plugin.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.EditShims.ImageEditShim.#ctor">
            <summary>
            Constructs an Image Editor control.
            </summary>
        </member>
        <member name="E:Sphere.Plugins.EditShims.ImageEditShim.ImageChanged">
            <summary>
            Fires when the image is modified.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.EditShims.ImageEditShim.Content">
            <summary>
            Gets the image contents as a Bitmap.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.EditShims.ImageEditShim.GetImages(System.Int16,System.Int16)">
            <summary>
            Splits the image into tiles and returns the tile bitmaps.
            </summary>
            <param name="tileWidth">Tile width.</param>
            <param name="tileHeight">Tile height.</param>
            <returns>An array of tile bitmaps.</returns>
        </member>
        <member name="M:Sphere.Plugins.EditShims.ImageEditShim.ZoomIn">
            <summary>
            Zooms in the image by one level.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.EditShims.ImageEditShim.ZoomOut">
            <summary>
            Zooms out the image by one level.
            </summary>
        </member>
        <member name="F:Sphere.Plugins.EditShims.ImageEditShim.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.EditShims.ImageEditShim.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Sphere.Plugins.EditShims.ImageEditShim.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Sphere.Plugins.EditShims.ScriptEditShim">
            <summary>
            Defers code editing functionality to the active Script plugin.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.EditShims.ScriptEditShim.#ctor">
            <summary>
            Constructs a Script Editor control.
            </summary>
        </member>
        <member name="P:Sphere.Plugins.EditShims.ScriptEditShim.Text">
            <summary>
            Gets or sets the contents of the script.
            </summary>
        </member>
        <member name="F:Sphere.Plugins.EditShims.ScriptEditShim.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Sphere.Plugins.EditShims.ScriptEditShim.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Sphere.Plugins.EditShims.ScriptEditShim.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
    </members>
</doc>
