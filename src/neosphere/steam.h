// WARNING: This file is auto-generated. Do not edit.
// Generator script is located at scripts/generate_steam_bindings.py

#include <stdbool.h>
#include <windows.h>
#include <stdint.h>

HMODULE steam_api;

// #######
// STRUCTS
// #######

typedef struct {
	uint8_t m_rgubIPv6 [16];
	uint32_t m_eType;
} SteamIPAddress_t;

typedef struct {
	uint64_t m_gameID;
	uint32_t m_unGameIP;
	uint16_t m_usGamePort;
	uint16_t m_usQueryPort;
	uint64_t m_steamIDLobby;
} FriendGameInfo_t;

typedef struct {
	char m_szKey [256];
	char m_szValue [256];
} MatchMakingKeyValuePair_t;

typedef struct {
	uint16_t m_usConnectionPort;
	uint16_t m_usQueryPort;
	uint32_t m_unIP;
} servernetadr_t;

typedef struct {
	servernetadr_t m_NetAdr;
	int32_t m_nPing;
	bool m_bHadSuccessfulResponse;
	bool m_bDoNotRefresh;
	char m_szGameDir [32];
	char m_szMap [32];
	char m_szGameDescription [64];
	uint32_t m_nAppID;
	int32_t m_nPlayers;
	int32_t m_nMaxPlayers;
	int32_t m_nBotPlayers;
	bool m_bPassword;
	bool m_bSecure;
	uint32_t m_ulTimeLastPlayed;
	int32_t m_nServerVersion;
	char m_szServerName [64];
	char m_szGameTags [128];
	uint64_t m_steamID;
} gameserveritem_t;

typedef struct {
	uint32_t m_eType;
	uint64_t m_ulLocationID;
} SteamPartyBeaconLocation_t;

typedef struct {
	const char ** m_ppStrings;
	int32_t m_nNumStrings;
} SteamParamStringArray_t;

typedef struct {
	uint64_t m_steamIDUser;
	int32_t m_nGlobalRank;
	int32_t m_nScore;
	int32_t m_cDetails;
	uint64_t m_hUGC;
} LeaderboardEntry_t;

typedef struct {
	uint8_t m_bConnectionActive;
	uint8_t m_bConnecting;
	uint8_t m_eP2PSessionError;
	uint8_t m_bUsingRelay;
	int32_t m_nBytesQueuedForSend;
	int32_t m_nPacketsQueuedForSend;
	uint32_t m_nRemoteIP;
	uint16_t m_nRemotePort;
} P2PSessionState_t;

typedef struct {
	uint32_t eMode;
	float x;
	float y;
	bool bActive;
} InputAnalogActionData_t;

typedef struct {
	bool bState;
	bool bActive;
} InputDigitalActionData_t;

typedef struct {
	float rotQuatX;
	float rotQuatY;
	float rotQuatZ;
	float rotQuatW;
	float posAccelX;
	float posAccelY;
	float posAccelZ;
	float rotVelX;
	float rotVelY;
	float rotVelZ;
} InputMotionData_t;

typedef struct {
	float driftCorrectedQuatX;
	float driftCorrectedQuatY;
	float driftCorrectedQuatZ;
	float driftCorrectedQuatW;
	float sensorFusionQuatX;
	float sensorFusionQuatY;
	float sensorFusionQuatZ;
	float sensorFusionQuatW;
	float deferredSensorFusionQuatX;
	float deferredSensorFusionQuatY;
	float deferredSensorFusionQuatZ;
	float deferredSensorFusionQuatW;
	float gravityX;
	float gravityY;
	float gravityZ;
	float degreesPerSecondX;
	float degreesPerSecondY;
	float degreesPerSecondZ;
} InputMotionDataV2_t;

typedef struct {
	uint64_t controllerHandle;
	uint32_t eEventType;
	AnalogAction_t analogAction;
} SteamInputActionEvent_t;

typedef struct {
	uint64_t m_nPublishedFileId;
	uint32_t m_eResult;
	uint32_t m_eFileType;
	uint32_t m_nCreatorAppID;
	uint32_t m_nConsumerAppID;
	char m_rgchTitle [129];
	char m_rgchDescription [8000];
	uint64_t m_ulSteamIDOwner;
	uint32_t m_rtimeCreated;
	uint32_t m_rtimeUpdated;
	uint32_t m_rtimeAddedToUserList;
	uint32_t m_eVisibility;
	bool m_bBanned;
	bool m_bAcceptedForUse;
	bool m_bTagsTruncated;
	char m_rgchTags [1025];
	uint64_t m_hFile;
	uint64_t m_hPreviewFile;
	char m_pchFileName [260];
	int32_t m_nFileSize;
	int32_t m_nPreviewFileSize;
	char m_rgchURL [256];
	uint32_t m_unVotesUp;
	uint32_t m_unVotesDown;
	float m_flScore;
	uint32_t m_unNumChildren;
} SteamUGCDetails_t;

typedef struct {
	uint64_t m_itemId;
	int32_t m_iDefinition;
	uint16_t m_unQuantity;
	uint16_t m_unFlags;
} SteamItemDetails_t;

typedef struct {
	uint8_t m_ipv6 [16];
	uint16_t m_port;
} SteamNetworkingIPAddr;

typedef struct {
	uint32_t m_eType;
	int32_t m_cbSize;
	char m_szUnknownRawString [128];
} SteamNetworkingIdentity;

typedef struct {
	SteamNetworkingIdentity m_identityRemote;
	int64_t m_nUserData;
	uint32_t m_hListenSocket;
	SteamNetworkingIPAddr m_addrRemote;
	uint16_t m__pad1;
	uint32_t m_idPOPRemote;
	uint32_t m_idPOPRelay;
	uint32_t m_eState;
	int32_t m_eEndReason;
	char m_szEndDebug [128];
	char m_szConnectionDescription [128];
	int32_t m_nFlags;
	uint32_t reserved [63];
} SteamNetConnectionInfo_t;

typedef struct {
	uint32_t m_eState;
	int32_t m_nPing;
	float m_flConnectionQualityLocal;
	float m_flConnectionQualityRemote;
	float m_flOutPacketsPerSec;
	float m_flOutBytesPerSec;
	float m_flInPacketsPerSec;
	float m_flInBytesPerSec;
	int32_t m_nSendRateBytesPerSecond;
	int32_t m_cbPendingUnreliable;
	int32_t m_cbPendingReliable;
	int32_t m_cbSentUnackedReliable;
	int64_t m_usecQueueTime;
	uint32_t reserved [16];
} SteamNetConnectionRealTimeStatus_t;

typedef struct {
	int32_t m_cbPendingUnreliable;
	int32_t m_cbPendingReliable;
	int32_t m_cbSentUnackedReliable;
	int32_t _reservePad1;
	int64_t m_usecQueueTime;
	uint32_t reserved [10];
} SteamNetConnectionRealTimeLaneStatus_t;

typedef struct {
	void * m_pData;
	int32_t m_cbSize;
	uint32_t m_conn;
	SteamNetworkingIdentity m_identityPeer;
	int64_t m_nConnUserData;
	int64_t m_usecTimeReceived;
	int64_t m_nMessageNumber;
	void (*m_pfnFreeData)(SteamNetworkingMessage_t *);
	void (*m_pfnRelease)(SteamNetworkingMessage_t *);
	int32_t m_nChannel;
	int32_t m_nFlags;
	int64_t m_nUserData;
	uint16_t m_idxLane;
	uint16_t _pad1__;
} SteamNetworkingMessage_t;

typedef struct {
	uint8_t m_data [512];
} SteamNetworkPingLocation_t;

typedef struct {
	uint32_t m_eValue;
	uint32_t m_eDataType;
	int64_t m_int64;
} SteamNetworkingConfigValue_t;

typedef struct {
	int32_t m_cbSize;
	char m_data [128];
} SteamDatagramHostedAddress;

typedef struct {
	SteamNetworkingIdentity m_identity;
	SteamDatagramHostedAddress m_routing;
	uint32_t m_nAppID;
	uint32_t m_rtime;
	int32_t m_cbAppData;
	char m_appData [2048];
} SteamDatagramGameCoordinatorServerLogin;

typedef struct {
	uint64_t actionHandle;
	InputAnalogActionData_t analogActionData;
} AnalogAction_t;


// #################
// FUNCTION POINTERS
// #################

typedef void * (*FuncPtr_VG8ZBDL) (void *, int32_t, int32_t, const char *);
typedef void * (*FuncPtr_57N8ZDJ) (void *, int32_t, const char *);
typedef void * (*FuncPtr_0256EZA) ();
typedef void * (*FuncPtr_5ZRT57X) (void *, uint32_t, MatchMakingKeyValuePair_t **, uint32_t, void *);
typedef void * (*FuncPtr_8OKTGWY) (void *, uint32_t, void *);
typedef void * (*FuncPtr_VJL8HH3) (void *, int32_t);
typedef void (*FuncPtr_2AF9S22) ();
typedef void (*FuncPtr_ECXJ23N) (MatchMakingKeyValuePair_t *);
typedef void (*FuncPtr_1YA5008) (servernetadr_t *);
typedef void (*FuncPtr_S9BUASQ) (servernetadr_t *, uint32_t, uint16_t, uint16_t);
typedef void (*FuncPtr_BA6HCX9) (servernetadr_t *, uint16_t);
typedef void (*FuncPtr_3J3DYVV) (servernetadr_t *, uint32_t);
typedef void (*FuncPtr_OUPGYZU) (servernetadr_t *, const servernetadr_t *);
typedef void (*FuncPtr_40DO09O) (gameserveritem_t *);
typedef void (*FuncPtr_FS8YPZ9) (gameserveritem_t *, const char *);
typedef void (*FuncPtr_MSBKD78) (SteamNetworkingIPAddr *);
typedef void (*FuncPtr_GJUOQ70) (SteamNetworkingIPAddr *, const uint8_t *, uint16_t);
typedef void (*FuncPtr_GRLPBG3) (SteamNetworkingIPAddr *, uint32_t, uint16_t);
typedef void (*FuncPtr_WVJSBID) (SteamNetworkingIPAddr *, uint16_t);
typedef void (*FuncPtr_Y8IV210) (SteamNetworkingIPAddr *, char *, uint32_t, bool);
typedef void (*FuncPtr_32WZZXM) (SteamNetworkingIdentity *);
typedef void (*FuncPtr_S0ZSJYC) (SteamNetworkingIdentity *, uint64_t);
typedef void (*FuncPtr_7BXAOUI) (SteamNetworkingIdentity *, const SteamNetworkingIPAddr *);
typedef void (*FuncPtr_CSZQX1T) (SteamNetworkingIdentity *, uint32_t, uint16_t);
typedef void (*FuncPtr_82M0VF2) (SteamNetworkingIdentity *, char *, uint32_t);
typedef void (*FuncPtr_DTDSWQM) (SteamNetworkingMessage_t *);
typedef void (*FuncPtr_N9EZRXJ) (SteamNetworkingConfigValue_t *, uint32_t, int32_t);
typedef void (*FuncPtr_A1F3PIW) (SteamNetworkingConfigValue_t *, uint32_t, int64_t);
typedef void (*FuncPtr_DV2OGFB) (SteamNetworkingConfigValue_t *, uint32_t, float);
typedef void (*FuncPtr_CX0Z57C) (SteamNetworkingConfigValue_t *, uint32_t, void *);
typedef void (*FuncPtr_TJ0PL9S) (SteamNetworkingConfigValue_t *, uint32_t, const char *);
typedef void (*FuncPtr_VOUO1EV) (SteamDatagramHostedAddress *);
typedef void (*FuncPtr_81V32H3) (SteamDatagramHostedAddress *, uint32_t, uint16_t, uint32_t);
typedef void (*FuncPtr_L6A2WOA) (void *, int32_t, int32_t);
typedef void (*FuncPtr_M6OZT1Y) (void *, const SteamIPAddress_t *, uint16_t);
typedef void (*FuncPtr_4GXSJ7N) (void *, uint32_t, uint16_t);
typedef void (*FuncPtr_NMXH8X4) (void *, uint64_t, int32_t, const char *);
typedef void (*FuncPtr_SGI2TCR) (void *);
typedef void (*FuncPtr_ULJ3EGR) (void *, uint64_t);
typedef void (*FuncPtr_QX4IH25) (void *, uint32_t);
typedef void (*FuncPtr_L1OPJNR) (void *, uint64_t, uint32_t, uint16_t);
typedef void (*FuncPtr_JNIZ00S) (void *, int16_t, uint64_t *, int32_t);
typedef void (*FuncPtr_QO4KT3P) (void *, uint64_t, bool);
typedef void (*FuncPtr_ABDKEHU) (void *, const char *);
typedef void (*FuncPtr_V79H2AS) (void *, const char *, uint64_t);
typedef void (*FuncPtr_EQX7U81) (void *, const char *, uint32_t);
typedef void (*FuncPtr_B7L2KIJ) (void *, uint32_t, uint32_t);
typedef void (*FuncPtr_Z2CYP0L) (void *, bool);
typedef void (*FuncPtr_WNRXG5H) (void *, const char *, const char *, uint32_t);
typedef void (*FuncPtr_LHPFCFO) (void *, const char *, int32_t, uint32_t);
typedef void (*FuncPtr_7LRXUW3) (void *, const char *, int32_t);
typedef void (*FuncPtr_WX01A0G) (void *, int32_t);
typedef void (*FuncPtr_9FHG65D) (void *, uint64_t, const char *, const char *);
typedef void (*FuncPtr_KXY6QAH) (void *, uint64_t, uint32_t, uint16_t, uint64_t);
typedef void (*FuncPtr_2JGFIGM) (void *, void *, int32_t);
typedef void (*FuncPtr_3YU7H78) (void *, void *, uint32_t);
typedef void (*FuncPtr_PG6R7VU) (void *, gameserveritem_t *);
typedef void (*FuncPtr_6WPZBUM) (void *, const char *, int32_t, float);
typedef void (*FuncPtr_F7P7QW2) (void *, const char *, const char *);
typedef void (*FuncPtr_SMJUVEG) (void *, void *);
typedef void (*FuncPtr_0IHM5OW) (void *, uint64_t, uint64_t);
typedef void (*FuncPtr_C9ODJKZ) (void *, float);
typedef void (*FuncPtr_YSJL1U6) (void *, uint64_t, uint16_t, uint16_t);
typedef void (*FuncPtr_DGXY0QR) (void *, uint64_t, uint16_t, uint16_t, uint16_t, uint16_t);
typedef void (*FuncPtr_2X9DB0K) (void *, uint64_t, uint32_t, uint8_t, char, uint8_t, char);
typedef void (*FuncPtr_ON0TH6L) (void *, uint64_t, uint8_t, uint8_t, uint8_t, uint32_t);
typedef void (*FuncPtr_SELLNWM) (void *, uint64_t, uint32_t, uint16_t, uint16_t, uint16_t, uint32_t);
typedef void (*FuncPtr_N3ELVBW) (void *, uint32_t, const char *, const char *);
typedef void (*FuncPtr_PC8GW3Y) (void *, uint32_t, uint32_t, uint32_t);
typedef void (*FuncPtr_VF34662) (void *, uint32_t, const char *);
typedef void (*FuncPtr_C80CUZ7) (void *, uint32_t, int32_t, int32_t);
typedef void (*FuncPtr_WINR73F) (void *, uint32_t, int32_t);
typedef void (*FuncPtr_TL3U53J) (void *, uint32_t, uint32_t, uint32_t, bool);
typedef void (*FuncPtr_8KIREDM) (void *, uint32_t, bool);
typedef void (*FuncPtr_DRGUR2P) (void *, uint32_t, const char *, bool, bool);
typedef void (*FuncPtr_UIO0LTQ) (void *, const char *, const char *, const char *, const char *, uint32_t, bool, bool);
typedef void (*FuncPtr_XOO7UUN) (void *, uint32_t, float, int32_t, int32_t);
typedef void (*FuncPtr_PKSQVNS) (void *, uint32_t, float);
typedef void (*FuncPtr_LD8LD51) (void *, uint32_t, const char **);
typedef void (*FuncPtr_7CDA1Y0) (void *, const char *, const char *, const char *, uint32_t);
typedef void (*FuncPtr_F9GQR89) (void *, int32_t, const SteamNetworkingMessage_t *, int64_t *);
typedef void (*FuncPtr_6IRW6A6) (void *, const SteamNetworkingIdentity *);
typedef void (*FuncPtr_34FC2FK) (void *, int32_t, SteamNetworkingFakeIPResult_t *);
typedef void (*FuncPtr_K88VF07) (void *, const SteamNetworkPingLocation_t *, char *, int32_t);
typedef void (*FuncPtr_YNQALTX) (void *, const SteamNetworkingIPAddr *, char *, uint32_t, bool);
typedef void (*FuncPtr_V29X3I8) (void *, const SteamNetworkingIdentity *, char *, uint32_t);
typedef void (*FuncPtr_457A6DB) (void *, uint16_t);
typedef void (*FuncPtr_Q11DS9I) (void *, const SteamNetworkingIPAddr *);
typedef uint8_t (*FuncPtr_N4Y7JGJ) (void *);
typedef uint64_t (*FuncPtr_L4JFI1M) (SteamNetworkingIdentity *);
typedef uint64_t (*FuncPtr_JODKBKN) (void *);
typedef uint64_t (*FuncPtr_478EJJH) (void *, void *, int32_t);
typedef uint64_t (*FuncPtr_GBI8XH3) (void *, const char *);
typedef uint64_t (*FuncPtr_OZSNAGX) (void *, int32_t, int32_t);
typedef uint64_t (*FuncPtr_OK7DU08) (void *, int32_t);
typedef uint64_t (*FuncPtr_UG6F568) (void *, uint64_t *, int32_t);
typedef uint64_t (*FuncPtr_0B4F83P) (void *, uint64_t, int32_t);
typedef uint64_t (*FuncPtr_ROMSHXY) (void *, uint64_t);
typedef uint64_t (*FuncPtr_5IENTZ6) (void *, uint32_t);
typedef uint64_t (*FuncPtr_MMU54ZK) (void *, uint32_t, int32_t);
typedef uint64_t (*FuncPtr_KXMWAG1) (void *, uint32_t, SteamPartyBeaconLocation_t *, const char *, const char *);
typedef uint64_t (*FuncPtr_PWN3TI5) (void *, uint64_t, uint32_t);
typedef uint64_t (*FuncPtr_1DL2MAF) (void *, const char *, const void *, uint32_t);
typedef uint64_t (*FuncPtr_WMR6D4P) (void *, const char *, uint32_t, uint32_t);
typedef uint64_t (*FuncPtr_V3ZOTYF) (void *, const char *, const char *, uint32_t, const char *, const char *, uint32_t, SteamParamStringArray_t *, uint32_t);
typedef uint64_t (*FuncPtr_P6L4VQH) (void *, uint64_t, bool);
typedef uint64_t (*FuncPtr_BWNXNWS) (void *, uint64_t, uint32_t, SteamParamStringArray_t *, SteamParamStringArray_t *);
typedef uint64_t (*FuncPtr_LTDUPD7) (void *, uint32_t, const char *, const char *, const char *, uint32_t, const char *, const char *, uint32_t, SteamParamStringArray_t *);
typedef uint64_t (*FuncPtr_UJJQ7EM) (void *, uint32_t, uint32_t);
typedef uint64_t (*FuncPtr_Z0EFDA3) (void *, uint32_t, uint32_t, uint32_t, uint32_t, SteamParamStringArray_t *, SteamParamStringArray_t *);
typedef uint64_t (*FuncPtr_YXOTX2A) (void *, uint64_t, const char *, uint32_t);
typedef uint64_t (*FuncPtr_MHQOQMF) (void *, uint64_t, uint32_t, int32_t, int32_t);
typedef uint64_t (*FuncPtr_XW9HKPH) (void *, uint64_t, uint64_t *, int32_t);
typedef uint64_t (*FuncPtr_ESEF2HW) (void *, uint64_t, uint32_t, int32_t, const int32_t *, int32_t);
typedef uint64_t (*FuncPtr_Z7KXEAV) (void *, uint64_t, uint64_t);
typedef uint64_t (*FuncPtr_EXQO5KB) (void *, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t);
typedef uint64_t (*FuncPtr_141ZMER) (void *, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t);
typedef uint64_t (*FuncPtr_J60XIMI) (void *, uint32_t, uint32_t, uint32_t, uint32_t, const char *);
typedef uint64_t (*FuncPtr_MZL783D) (void *, uint64_t *, uint32_t);
typedef uint64_t (*FuncPtr_UYTRDOL) (void *, uint32_t, uint64_t);
typedef uint64_t (*FuncPtr_NF2S9X9) (void *, uint64_t, const char *);
typedef uint64_t (*FuncPtr_0EN8SYN) (void *, const char *, const char *);
typedef uint64_t (*FuncPtr_VNO8RE2) (void *, const int32_t *, const uint32_t *, uint32_t);
typedef uint32_t (*FuncPtr_5R8XSU1) (servernetadr_t *);
typedef uint32_t (*FuncPtr_X4BL4VE) (SteamNetworkingIPAddr *);
typedef uint32_t (*FuncPtr_L19KYUH) (SteamNetworkingIdentity *);
typedef uint32_t (*FuncPtr_G6CP3S6) (SteamDatagramHostedAddress *);
typedef uint32_t (*FuncPtr_7GJ6JY0) (void *);
typedef uint32_t (*FuncPtr_DQVEA2K) (void *, uint32_t *, uint32_t *, uint32_t);
typedef uint32_t (*FuncPtr_WLFO4TD) (void *, bool, void *, uint32_t, uint32_t *, bool, void *, uint32_t, uint32_t *, uint32_t);
typedef uint32_t (*FuncPtr_8XNOTIZ) (void *, const void *, uint32_t, void *, uint32_t, uint32_t *, uint32_t);
typedef uint32_t (*FuncPtr_E5UGQUO) (void *, void *, int32_t, uint32_t *, const SteamNetworkingIdentity *);
typedef uint32_t (*FuncPtr_0ZPYLOV) (void *, const char *);
typedef uint32_t (*FuncPtr_YOG5NAN) (void *, const void *, int32_t, uint64_t);
typedef uint32_t (*FuncPtr_8ZU9CZQ) (void *, uint64_t, uint32_t);
typedef uint32_t (*FuncPtr_HRQIXGN) (void *, uint64_t);
typedef uint32_t (*FuncPtr_Q3EJ25J) (void *, uint64_t, uint32_t, uint32_t);
typedef uint32_t (*FuncPtr_9UOQ486) (void *, uint32_t);
typedef uint32_t (*FuncPtr_UNVMPYE) (void *, const char *, const char *);
typedef uint32_t (*FuncPtr_T81WTQB) (void *, uint64_t, int32_t, int32_t);
typedef uint32_t (*FuncPtr_WQMRPDT) (void *, int32_t, int32_t);
typedef uint32_t (*FuncPtr_TAYCN1J) (void *, uint64_t, char *, int32_t);
typedef uint32_t (*FuncPtr_XNA0Y3U) (void *, const char *, int32_t);
typedef uint32_t (*FuncPtr_2NJ9UM1) (void *, int32_t, int32_t, int32_t);
typedef uint32_t (*FuncPtr_AMEPV10) (void *, uint64_t, uint64_t, uint32_t);
typedef uint32_t (*FuncPtr_4PARCUP) (void *, uint32_t, uint32_t *, uint32_t);
typedef uint32_t (*FuncPtr_76JPC6E) (void *, uint32_t, char *, uint32_t);
typedef uint32_t (*FuncPtr_AD653NB) (void *, int32_t, SteamIPAddress_t, uint16_t, bool);
typedef uint32_t (*FuncPtr_N5HRYIQ) (void *, uint64_t, int32_t, int32_t, bool);
typedef uint32_t (*FuncPtr_7KLWD3R) (void *, SteamIPAddress_t, uint16_t, int32_t);
typedef uint32_t (*FuncPtr_OWM206T) (void *, void *, uint32_t, int32_t, int32_t);
typedef uint32_t (*FuncPtr_CV3HAYA) (void *, const char *, const char *, int32_t, int32_t);
typedef uint32_t (*FuncPtr_UXDMGDE) (void *, uint32_t, const char *, const char *);
typedef uint32_t (*FuncPtr_4G4OU4M) (void *, uint32_t, const char *);
typedef uint32_t (*FuncPtr_5MD95H8) (void *, bool);
typedef uint32_t (*FuncPtr_FDBOCS2) (void *, uint32_t, uint32_t);
typedef uint32_t (*FuncPtr_XWA6K00) (void *, uint64_t, uint32_t, uint32_t *, uint32_t);
typedef uint32_t (*FuncPtr_ER06W62) (void *, uint64_t, uint64_t *, uint64_t *);
typedef uint32_t (*FuncPtr_1DL64ZG) (void *, uint64_t *, uint32_t);
typedef uint32_t (*FuncPtr_DOJ5AGZ) (void *, uint32_t *, uint32_t);
typedef uint32_t (*FuncPtr_A716J7R) (void *, int32_t);
typedef uint32_t (*FuncPtr_BSZGLIN) (void *, const SteamNetworkingIdentity *, const void *, uint32_t, int32_t, int32_t);
typedef uint32_t (*FuncPtr_M0XAPPS) (void *, const SteamNetworkingIdentity *, SteamNetConnectionInfo_t *, SteamNetConnectionRealTimeStatus_t *);
typedef uint32_t (*FuncPtr_MNTIQFN) (void *, const SteamNetworkingIPAddr *, int32_t, const SteamNetworkingConfigValue_t *);
typedef uint32_t (*FuncPtr_8NRQEAI) (void *, int32_t, int32_t, const SteamNetworkingConfigValue_t *);
typedef uint32_t (*FuncPtr_CQ0C442) (void *, const SteamNetworkingIdentity *, int32_t, int32_t, const SteamNetworkingConfigValue_t *);
typedef uint32_t (*FuncPtr_V3JNHOT) (void *, uint32_t, const void *, uint32_t, int32_t, int64_t *);
typedef uint32_t (*FuncPtr_G3P6JMP) (void *, uint32_t, SteamNetConnectionRealTimeStatus_t *, int32_t, SteamNetConnectionRealTimeLaneStatus_t *);
typedef uint32_t (*FuncPtr_V08UICG) (void *, uint32_t, int32_t, const int32_t *, const uint16_t *);
typedef uint32_t (*FuncPtr_3ATOIS0) (void *, SteamNetAuthenticationStatus_t *);
typedef uint32_t (*FuncPtr_IMMI5RO) (void *, SteamDatagramHostedAddress *);
typedef uint32_t (*FuncPtr_NEWYXZY) (void *, SteamDatagramGameCoordinatorServerLogin *, int32_t *, void *);
typedef uint32_t (*FuncPtr_JWR6OC1) (void *, void *, const SteamNetworkingIdentity *, int32_t, int32_t, const SteamNetworkingConfigValue_t *);
typedef uint32_t (*FuncPtr_YKZ0HHY) (void *, uint32_t, SteamNetworkingIPAddr *);
typedef uint32_t (*FuncPtr_GPAMHWA) (void *, SteamRelayNetworkStatus_t *);
typedef uint32_t (*FuncPtr_RWA1TRM) (void *, const SteamNetworkingIPAddr *, SteamNetworkingIdentity *);
typedef uint32_t (*FuncPtr_PWT7KXY) (void *, uint32_t, uint32_t, intptr_t, uint32_t *, void *, size_t *);
typedef uint32_t (*FuncPtr_ZK9B4EC) (void *, uint32_t, bool);
typedef uint32_t (*FuncPtr_3HANRUM) (void *, const SteamNetworkingIPAddr *);
typedef uint32_t (*FuncPtr_IQGQBFY) (void *, const SteamNetworkingIPAddr *, const void *, uint32_t, int32_t);
typedef uint16_t (*FuncPtr_IRQ0ISR) (servernetadr_t *);
typedef uint16_t (*FuncPtr_LWMHJGY) (void *);
typedef int64_t (*FuncPtr_2CGR48N) (void *, const char *);
typedef int64_t (*FuncPtr_4C98U4L) (void *, uint32_t);
typedef int64_t (*FuncPtr_WL2O3N8) (void *);
typedef int32_t (*FuncPtr_CYW6AM7) (void *);
typedef int32_t (*FuncPtr_JCML72O) (void *, int32_t);
typedef int32_t (*FuncPtr_4CSTZE3) (void *, int32_t *, uint32_t);
typedef int32_t (*FuncPtr_TUZBSGX) (void *, void *, int32_t, uint64_t, uint32_t, uint16_t, bool);
typedef int32_t (*FuncPtr_6D60VCG) (void *, int32_t, bool);
typedef int32_t (*FuncPtr_DZPOH6I) (void *, uint64_t);
typedef int32_t (*FuncPtr_9172WHF) (void *, int16_t);
typedef int32_t (*FuncPtr_ZANXPGD) (void *, uint64_t, int32_t, void *, int32_t, uint32_t *, uint64_t *);
typedef int32_t (*FuncPtr_I0VXXPS) (void *, uint64_t, int32_t, void *, int32_t, uint32_t *);
typedef int32_t (*FuncPtr_QNX0ZTX) (void *, uint32_t, uint64_t, const char *, char *, uint32_t);
typedef int32_t (*FuncPtr_2C6IBJY) (void *, uint32_t, uint32_t, uint16_t, uint16_t, uint32_t, uint32_t);
typedef int32_t (*FuncPtr_UK3K6YH) (void *, uint64_t, int32_t, uint64_t *, void *, int32_t, uint32_t *);
typedef int32_t (*FuncPtr_FGX71GJ) (void *, void *);
typedef int32_t (*FuncPtr_R3341KW) (void *, uint32_t, uint16_t, void *);
typedef int32_t (*FuncPtr_1KKG5YA) (void *, const char *, void *, int32_t);
typedef int32_t (*FuncPtr_4W35XJV) (void *, const char *);
typedef int32_t (*FuncPtr_O1K6S5M) (void *, uint64_t, void *, int32_t, uint32_t, uint32_t);
typedef int32_t (*FuncPtr_67VNZWT) (void *, char *, uint32_t, float *, bool *);
typedef int32_t (*FuncPtr_NHZUNVK) (void *, int32_t, char *, uint32_t, float *, bool *);
typedef int32_t (*FuncPtr_AWAG3UD) (void *, const char *, int64_t *, uint32_t);
typedef int32_t (*FuncPtr_L6YR6GS) (void *, const char *, double *, uint32_t);
typedef int32_t (*FuncPtr_R1NQYS3) (void *, char *, int32_t);
typedef int32_t (*FuncPtr_5LIK133) (void *, uint32_t);
typedef int32_t (*FuncPtr_76YNAIJ) (void *, uint64_t *);
typedef int32_t (*FuncPtr_BZI4L7J) (void *, uint64_t, uint64_t *);
typedef int32_t (*FuncPtr_K06YL6E) (void *, uint64_t, uint64_t, uint64_t, uint32_t *);
typedef int32_t (*FuncPtr_ADKFPOE) (void *, uint32_t, char *, int32_t);
typedef int32_t (*FuncPtr_YKYH6EN) (void *, int32_t, SteamNetworkingMessage_t **, int32_t);
typedef int32_t (*FuncPtr_L5TQNZX) (void *, uint32_t, SteamNetworkingMessage_t **, int32_t);
typedef int32_t (*FuncPtr_XQ3HV6D) (void *, const SteamNetworkingIdentity *, int32_t, void *);
typedef int32_t (*FuncPtr_38QQMVW) (void *, const SteamNetworkPingLocation_t *, const SteamNetworkPingLocation_t *);
typedef int32_t (*FuncPtr_1IKME6M) (void *, const SteamNetworkPingLocation_t *);
typedef int32_t (*FuncPtr_TVS8NDL) (void *, uint32_t, uint32_t *);
typedef int32_t (*FuncPtr_4XTNTXH) (void *, uint32_t *, int32_t);
typedef int32_t (*FuncPtr_9NGPLAF) (void *, void *, int32_t, uint32_t *, uint16_t *);
typedef int32_t (*FuncPtr_91FBPMQ) (void *, SteamNetworkingMessage_t **, int32_t);
typedef int16_t (*FuncPtr_QWJNJVG) (void *, int32_t);
typedef gameserveritem_t * (*FuncPtr_2TWCI29) (void *, void *, int32_t);
typedef float (*FuncPtr_QOAS7B7) (void *);
typedef float (*FuncPtr_LSDID3M) (void *, SteamNetworkPingLocation_t *);
typedef const uint8_t * (*FuncPtr_114RJVH) (SteamNetworkingIdentity *, int32_t *);
typedef const char * (*FuncPtr_EAYGKP0) (servernetadr_t *);
typedef const char * (*FuncPtr_R2K8ZCC) (gameserveritem_t *);
typedef const char * (*FuncPtr_Z9U0D0C) (SteamNetworkingIdentity *);
typedef const char * (*FuncPtr_WV1XOCC) (void *);
typedef const char * (*FuncPtr_CKME2CH) (void *, uint64_t);
typedef const char * (*FuncPtr_JYLP2JB) (void *, uint64_t, int32_t);
typedef const char * (*FuncPtr_EIR3P2T) (void *, int16_t);
typedef const char * (*FuncPtr_BHUUHGB) (void *, uint64_t, const char *);
typedef const char * (*FuncPtr_DU8JHV5) (void *, uint64_t, uint32_t, uint32_t);
typedef const char * (*FuncPtr_F9IT8YO) (void *, uint64_t, uint64_t, const char *);
typedef const char * (*FuncPtr_OCTNQU8) (void *, int32_t, int32_t *);
typedef const char * (*FuncPtr_EDV1ALK) (void *, int32_t, uint32_t *, uint32_t *);
typedef const char * (*FuncPtr_53RW2GK) (void *, const char *, const char *);
typedef const char * (*FuncPtr_G0H05PP) (void *, uint32_t);
typedef const char * (*FuncPtr_GKHKW9K) (void *, const char *);
typedef const char * (*FuncPtr_TRJSYLI) (void *, uint32_t, uint32_t, uint32_t);
typedef const char * (*FuncPtr_TEQ1GO0) (void *, uint32_t, uint32_t);
typedef const char * (*FuncPtr_6IRXZ70) (void *, uint32_t, uint32_t *, uint32_t *);
typedef const SteamNetworkingIPAddr * (*FuncPtr_NMNIUZU) (SteamNetworkingIdentity *);
typedef bool (*FuncPtr_U7J85TZ) ();
typedef bool (*FuncPtr_FJVVET4) (SteamIPAddress_t *);
typedef bool (*FuncPtr_TUOJ7LF) (servernetadr_t *, const servernetadr_t *);
typedef bool (*FuncPtr_JYOELXF) (SteamNetworkingIPAddr *);
typedef bool (*FuncPtr_AX7SF1G) (SteamNetworkingIPAddr *, const char *);
typedef bool (*FuncPtr_J0TYL9L) (SteamNetworkingIPAddr *, const SteamNetworkingIPAddr *);
typedef bool (*FuncPtr_I7ZB1L1) (SteamNetworkingIdentity *);
typedef bool (*FuncPtr_EDJ1ZWC) (SteamNetworkingIdentity *, const char *);
typedef bool (*FuncPtr_8L6D2PT) (SteamNetworkingIdentity *, const void *, uint32_t);
typedef bool (*FuncPtr_RCDNF2L) (SteamNetworkingIdentity *, const SteamNetworkingIdentity *);
typedef bool (*FuncPtr_F9K0A2G) (void *, int32_t);
typedef bool (*FuncPtr_47F06R2) (void *);
typedef bool (*FuncPtr_QDNHZ83) (void *, char *, int32_t);
typedef bool (*FuncPtr_ZXK9933) (void *, void *, int32_t, uint32_t *);
typedef bool (*FuncPtr_IF8A7HP) (void *, uint32_t);
typedef bool (*FuncPtr_SZKWLWA) (void *, uint64_t, FriendGameInfo_t *);
typedef bool (*FuncPtr_TEFKFE5) (void *, uint64_t, int32_t);
typedef bool (*FuncPtr_0V57JQ5) (void *, uint64_t, int32_t *, int32_t *, int32_t *);
typedef bool (*FuncPtr_P2DHG90) (void *, uint64_t, uint64_t);
typedef bool (*FuncPtr_LFP1UO1) (void *, uint64_t, bool);
typedef bool (*FuncPtr_TR2AGV4) (void *, const char *, const char *);
typedef bool (*FuncPtr_46B6E53) (void *, uint64_t, const char *);
typedef bool (*FuncPtr_9MUN1QC) (void *, uint64_t);
typedef bool (*FuncPtr_PXPPJ5X) (void *, bool);
typedef bool (*FuncPtr_8GBYAXY) (void *, const char *);
typedef bool (*FuncPtr_GF74AYO) (void *, uint64_t, uint32_t);
typedef bool (*FuncPtr_XSOTH5E) (void *, int32_t, uint32_t *, uint32_t *);
typedef bool (*FuncPtr_8KMJI7V) (void *, int32_t, uint8_t *, int32_t);
typedef bool (*FuncPtr_HJLGS9A) (void *, uint64_t, bool *);
typedef bool (*FuncPtr_05PYSS3) (void *, uint64_t, void *, int32_t, int32_t, bool *);
typedef bool (*FuncPtr_SCSUM0J) (void *, uint32_t, uint32_t, const char *, uint32_t, const char *);
typedef bool (*FuncPtr_WEH28SE) (void *, char *, uint32_t);
typedef bool (*FuncPtr_JLTAT7V) (void *, uint32_t, int32_t, int32_t, int32_t, int32_t);
typedef bool (*FuncPtr_B49AHYY) (void *, int32_t, uint32_t *, uint32_t *, uint16_t *, uint16_t *, uint32_t *, uint32_t *);
typedef bool (*FuncPtr_58EQBN6) (void *, uint32_t, uint32_t, uint16_t, uint16_t, uint32_t);
typedef bool (*FuncPtr_RSFEOV3) (void *, uint64_t, const char *, const char *);
typedef bool (*FuncPtr_AVWHL3U) (void *, uint64_t, int32_t, char *, int32_t, char *, int32_t);
typedef bool (*FuncPtr_QD0GYK0) (void *, uint64_t, const void *, int32_t);
typedef bool (*FuncPtr_BZV0YK2) (void *, uint64_t, uint32_t *, uint16_t *, uint64_t *);
typedef bool (*FuncPtr_P0HJRYI) (void *, void *);
typedef bool (*FuncPtr_D3E2EMJ) (void *, uint64_t, uint64_t *, SteamPartyBeaconLocation_t *, char *, int32_t);
typedef bool (*FuncPtr_0TOTXFS) (void *, uint32_t *);
typedef bool (*FuncPtr_4USKP2Y) (void *, SteamPartyBeaconLocation_t *, uint32_t);
typedef bool (*FuncPtr_TX8AQYZ) (void *, SteamPartyBeaconLocation_t, uint32_t, char *, int32_t);
typedef bool (*FuncPtr_UL83Z5Y) (void *, const char *, const void *, int32_t);
typedef bool (*FuncPtr_V0LZBJ3) (void *, uint64_t, void *, uint32_t);
typedef bool (*FuncPtr_21B32MY) (void *, const char *, uint32_t);
typedef bool (*FuncPtr_94MX8T6) (void *, uint64_t *, uint64_t *);
typedef bool (*FuncPtr_ZOQQVX5) (void *, uint64_t, int32_t *, int32_t *);
typedef bool (*FuncPtr_HIW6KGU) (void *, uint64_t, uint32_t *, char **, int32_t *, uint64_t *);
typedef bool (*FuncPtr_9SZH67I) (void *, uint64_t, SteamParamStringArray_t *);
typedef bool (*FuncPtr_HV1VWZT) (void *, const char *, int32_t *);
typedef bool (*FuncPtr_R13WX4Z) (void *, const char *, float *);
typedef bool (*FuncPtr_E1Y1MX1) (void *, const char *, int32_t);
typedef bool (*FuncPtr_4TZ9TKE) (void *, const char *, float);
typedef bool (*FuncPtr_YEK57WK) (void *, const char *, float, double);
typedef bool (*FuncPtr_BP0FD46) (void *, const char *, bool *);
typedef bool (*FuncPtr_9UW5T36) (void *, const char *, bool *, uint32_t *);
typedef bool (*FuncPtr_10PMFQ2) (void *, const char *, uint32_t, uint32_t);
typedef bool (*FuncPtr_4HXQXV5) (void *, uint64_t, const char *, int32_t *);
typedef bool (*FuncPtr_L7ZISJH) (void *, uint64_t, const char *, float *);
typedef bool (*FuncPtr_RS1TYNY) (void *, uint64_t, const char *, bool *);
typedef bool (*FuncPtr_03KHOVE) (void *, uint64_t, const char *, bool *, uint32_t *);
typedef bool (*FuncPtr_DUHOTAP) (void *, uint64_t, int32_t, LeaderboardEntry_t *, int32_t *, int32_t);
typedef bool (*FuncPtr_HUEU73J) (void *, const char *, int64_t *);
typedef bool (*FuncPtr_V9CYK33) (void *, const char *, double *);
typedef bool (*FuncPtr_1JVS34O) (void *, const char *, int32_t *, int32_t *);
typedef bool (*FuncPtr_0HBTQLL) (void *, const char *, float *, float *);
typedef bool (*FuncPtr_DF0BZYH) (void *, int32_t, uint32_t *, bool *, char *, int32_t);
typedef bool (*FuncPtr_TJPIH56) (void *, uint32_t, uint64_t *, uint64_t *);
typedef bool (*FuncPtr_6LZ5H1U) (void *, uint32_t *, uint32_t *);
typedef bool (*FuncPtr_7PXLHN3) (void *, uint64_t, const void *, uint32_t, uint32_t, int32_t);
typedef bool (*FuncPtr_3ULIJ7O) (void *, uint32_t *, int32_t);
typedef bool (*FuncPtr_OKAMYWU) (void *, void *, uint32_t, uint32_t *, uint64_t *, int32_t);
typedef bool (*FuncPtr_Z32YAFX) (void *, uint64_t, P2PSessionState_t *);
typedef bool (*FuncPtr_C33LZ5F) (void *, uint32_t, bool);
typedef bool (*FuncPtr_AVBAIUW) (void *, uint32_t, void *, uint32_t, bool);
typedef bool (*FuncPtr_P9763AI) (void *, uint32_t, uint32_t *);
typedef bool (*FuncPtr_1Z3R64K) (void *, uint32_t, void *, uint32_t, uint32_t *);
typedef bool (*FuncPtr_ZPRI3PJ) (void *, uint32_t, uint32_t *, uint32_t *);
typedef bool (*FuncPtr_VSDNQY3) (void *, uint32_t, void *, uint32_t, uint32_t *, uint32_t *);
typedef bool (*FuncPtr_N28FUUK) (void *, uint32_t, uint64_t *, int32_t *, SteamIPAddress_t *, uint16_t *);
typedef bool (*FuncPtr_E04HFKJ) (void *, uint32_t, SteamIPAddress_t *, uint16_t *);
typedef bool (*FuncPtr_C7SQD3V) (void *, uint32_t, const char *);
typedef bool (*FuncPtr_W0JCP8F) (void *, uint32_t, uint64_t);
typedef bool (*FuncPtr_NL2SU44) (void *, void *, uint32_t);
typedef bool (*FuncPtr_YOTQJV9) (void *, float);
typedef bool (*FuncPtr_292HD50) (void *, int32_t, int32_t, const char *);
typedef bool (*FuncPtr_QAXP2FJ) (void *, uint32_t, uint32_t);
typedef bool (*FuncPtr_DEITYTA) (void *, uint32_t, const char *, const char *);
typedef bool (*FuncPtr_9DRR946) (void *, uint32_t, uint64_t *);
typedef bool (*FuncPtr_HTH1Q6H) (void *, uint32_t, const char *, uint32_t *);
typedef bool (*FuncPtr_NB7E44Q) (void *, uint32_t, const char *, uint8_t *, uint32_t);
typedef bool (*FuncPtr_T7YUH7A) (void *, uint32_t, uint8_t *, uint32_t);
typedef bool (*FuncPtr_Z4BJB2M) (void *, uint32_t, uint32_t, uint8_t *, uint32_t);
typedef bool (*FuncPtr_OPV77RK) (void *, uint32_t, float *);
typedef bool (*FuncPtr_VAXWWFR) (void *, uint32_t, const char *, const char *, const char *);
typedef bool (*FuncPtr_BP47LP9) (void *, uint32_t, bool *);
typedef bool (*FuncPtr_P6UKXKN) (void *, bool, uint32_t);
typedef bool (*FuncPtr_ZS1ODO1) (void *, uint64_t, uint32_t, SteamUGCDetails_t *);
typedef bool (*FuncPtr_GD9SQE3) (void *, uint64_t, uint32_t, uint32_t, char *, uint32_t);
typedef bool (*FuncPtr_I1VRDLC) (void *, uint64_t, uint32_t, char *, uint32_t);
typedef bool (*FuncPtr_8VYZB90) (void *, uint64_t, uint32_t, uint64_t *, uint32_t);
typedef bool (*FuncPtr_2HW9KW2) (void *, uint64_t, uint32_t, uint32_t, uint64_t *);
typedef bool (*FuncPtr_A70981U) (void *, uint64_t, uint32_t, uint32_t, char *, uint32_t, char *, uint32_t, uint32_t *);
typedef bool (*FuncPtr_9A2QKTN) (void *, uint64_t, uint32_t, uint32_t, char *, uint32_t, char *, uint32_t);
typedef bool (*FuncPtr_A2GBW45) (void *, uint64_t, uint32_t, const char *, char *, uint32_t);
typedef bool (*FuncPtr_1AF4UEI) (void *, uint64_t, const SteamParamStringArray_t *);
typedef bool (*FuncPtr_0WTJHBH) (void *, uint64_t, uint32_t, uint32_t);
typedef bool (*FuncPtr_M42CC7I) (void *, uint64_t, const SteamParamStringArray_t *, bool);
typedef bool (*FuncPtr_B0QQLAS) (void *, uint64_t, const char *, uint32_t);
typedef bool (*FuncPtr_D5EVUKV) (void *, uint64_t, uint32_t, const char *);
typedef bool (*FuncPtr_V8ML2ZO) (void *, uint64_t, uint64_t *, char *, uint32_t, uint32_t *);
typedef bool (*FuncPtr_G83X4KD) (void *, uint64_t, uint64_t *, uint64_t *);
typedef bool (*FuncPtr_IJD4POG) (void *, int32_t, SteamItemDetails_t *, uint32_t *);
typedef bool (*FuncPtr_2PGKO9A) (void *, int32_t, uint32_t, const char *, char *, uint32_t *);
typedef bool (*FuncPtr_E9LFWT5) (void *, int32_t, uint64_t);
typedef bool (*FuncPtr_A2KLJPI) (void *, int32_t *);
typedef bool (*FuncPtr_BTHDHNA) (void *, int32_t *, const uint64_t *, uint32_t);
typedef bool (*FuncPtr_AOC9G27) (void *, int32_t, void *, uint32_t *);
typedef bool (*FuncPtr_OZAQTJ0) (void *, int32_t *, const void *, uint32_t, bool);
typedef bool (*FuncPtr_LAJRBFZ) (void *, int32_t *, const int32_t *, const uint32_t *, uint32_t);
typedef bool (*FuncPtr_6LUROTK) (void *, int32_t *, int32_t);
typedef bool (*FuncPtr_H2RHVEN) (void *, int32_t *, const int32_t *, uint32_t);
typedef bool (*FuncPtr_GUPX2E8) (void *, int32_t *, uint64_t, uint32_t);
typedef bool (*FuncPtr_T5FHRJO) (void *, int32_t *, const int32_t *, const uint32_t *, uint32_t, const uint64_t *, const uint32_t *, uint32_t);
typedef bool (*FuncPtr_P5GOEQU) (void *, int32_t *, uint64_t, uint32_t, uint64_t);
typedef bool (*FuncPtr_OE0IK4I) (void *, int32_t *, uint64_t, const uint64_t *, const uint32_t *, uint32_t, const uint64_t *, const uint32_t *, uint32_t);
typedef bool (*FuncPtr_L8HOAGO) (void *, int32_t *, uint32_t *);
typedef bool (*FuncPtr_4XMK85M) (void *, int32_t, const char *, char *, uint32_t *);
typedef bool (*FuncPtr_QG8Y9WI) (void *, uint64_t, int32_t *, uint32_t *);
typedef bool (*FuncPtr_9SDVSM3) (void *, int32_t *, uint64_t *, uint64_t *, uint32_t);
typedef bool (*FuncPtr_DV62ZCJ) (void *, int32_t, uint64_t *, uint64_t *);
typedef bool (*FuncPtr_YRJ9B5U) (void *, uint64_t, uint64_t, const char *);
typedef bool (*FuncPtr_C29D7IL) (void *, uint64_t, uint64_t, const char *, const char *);
typedef bool (*FuncPtr_648KBQY) (void *, uint64_t, uint64_t, const char *, bool);
typedef bool (*FuncPtr_421IMAY) (void *, uint64_t, uint64_t, const char *, int64_t);
typedef bool (*FuncPtr_8751GYB) (void *, uint64_t, uint64_t, const char *, float);
typedef bool (*FuncPtr_SVZ6UXK) (void *, uint64_t, int32_t *);
typedef bool (*FuncPtr_5MWVS5F) (void *, int32_t *, const char *);
typedef bool (*FuncPtr_U6YFTRF) (void *, uint32_t, char *, int32_t *);
typedef bool (*FuncPtr_S4CX9XI) (void *, uint32_t, int32_t *, int32_t *);
typedef bool (*FuncPtr_BOY2Z30) (void *, const SteamNetworkingIdentity *);
typedef bool (*FuncPtr_H4F29ZS) (void *, const SteamNetworkingIdentity *, int32_t);
typedef bool (*FuncPtr_USSL888) (void *, uint32_t, int32_t, const char *, bool);
typedef bool (*FuncPtr_YCCEKQN) (void *, uint32_t, int64_t);
typedef bool (*FuncPtr_4FH7GMW) (void *, uint32_t, char *, int32_t);
typedef bool (*FuncPtr_MVA194A) (void *, uint32_t, SteamNetConnectionInfo_t *);
typedef bool (*FuncPtr_UOQVO9S) (void *, uint32_t, SteamNetworkingIPAddr *);
typedef bool (*FuncPtr_1M479U1) (void *, uint32_t *, uint32_t *, bool, const SteamNetworkingIdentity *, const SteamNetworkingIdentity *);
typedef bool (*FuncPtr_GEWGG8Z) (void *, SteamNetworkingIdentity *);
typedef bool (*FuncPtr_PA349Q2) (void *, const void *, int32_t, void *);
typedef bool (*FuncPtr_K6MSWEM) (void *, int32_t *, void *, char *);
typedef bool (*FuncPtr_6KP7KLW) (void *, const void *, int32_t, char *);
typedef bool (*FuncPtr_K17TVEL) (void *, const char *, SteamNetworkPingLocation_t *);
typedef bool (*FuncPtr_WL63N1D) (void *, uint32_t, int32_t);
typedef bool (*FuncPtr_2UK86R1) (void *, uint32_t, float);
typedef bool (*FuncPtr_ZDQD8WT) (void *, uint32_t, void *);
typedef bool (*FuncPtr_L3YNCK3) (void *, uint32_t, uint32_t, int32_t);
typedef bool (*FuncPtr_203JVG4) (void *, uint32_t, uint32_t, float);
typedef bool (*FuncPtr_IRCF3FC) (void *, uint32_t, uint32_t, const char *);
typedef bool (*FuncPtr_J5RRDS0) (void *, uint32_t, uint32_t, intptr_t, uint32_t, const void *);
typedef bool (*FuncPtr_6LQ4HA0) (void *, const SteamNetworkingConfigValue_t *, uint32_t, intptr_t);
typedef bool (*FuncPtr_3GBARV6) (void *, SteamNetworkingIPAddr *, const char *);
typedef bool (*FuncPtr_F5ATXX1) (void *, SteamNetworkingIdentity *, const char *);
typedef bool (*FuncPtr_MLJUOOA) (void *, const void *, int32_t, uint32_t, uint16_t);
typedef bool (*FuncPtr_Y20PO49) (void *, uint32_t, const void *, uint32_t, uint64_t *);
typedef bool (*FuncPtr_BMTJBD8) (void *, uint64_t, const char *, int32_t);
typedef bool (*FuncPtr_3W1B074) (void *, uint64_t, const char *, float);
typedef bool (*FuncPtr_6UJ02C4) (void *, uint64_t, const char *, float, double);
typedef SteamNetworkingMessage_t * (*FuncPtr_RQEWWKS) (void *, int32_t);
typedef SteamIPAddress_t (*FuncPtr_YUNTO1R) (void *);
typedef InputMotionData_t (*FuncPtr_8VPMC35) (void *, uint64_t);
typedef InputDigitalActionData_t (*FuncPtr_CHZW17Q) (void *, uint64_t, uint64_t);
typedef InputAnalogActionData_t (*FuncPtr_VR0SVZA) (void *, uint64_t, uint64_t);

// #######
// METHODS
// #######

// The following functions/methods are not exported:
//	SteamAPI_ISteamInput_SetDualSenseTriggerEffect
//	SteamAPI_ISteamClient_SetWarningMessageHook
//	SteamAPI_ISteamUtils_SetWarningMessageHook
//	SteamAPI_ISteamInput_EnableActionEventCallbacks
//	SteamAPI_ISteamNetworkingUtils_SetDebugOutputFunction
//	SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetConnectionStatusChanged
//	SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetAuthenticationStatusChanged
//	SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamRelayNetworkStatusChanged
//	SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_FakeIPResult
//	SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionRequest
//	SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionFailed

void steamapi_init (void);
static bool js_SteamAPI_Init													(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamAPI_Shutdown												(int num_args, bool is_ctor, intptr_t magic);

// SteamIPAddress_t
static bool js_SteamIPAddress_t_IsSet											(int num_args, bool is_ctor, intptr_t magic);

// MatchMakingKeyValuePair_t
static bool js_MatchMakingKeyValuePair_t_Construct								(int num_args, bool is_ctor, intptr_t magic);

// servernetadr_t
static bool js_servernetadr_t_Construct											(int num_args, bool is_ctor, intptr_t magic);
static bool js_servernetadr_t_Init												(int num_args, bool is_ctor, intptr_t magic);
static bool js_servernetadr_t_SetQueryPort										(int num_args, bool is_ctor, intptr_t magic);
static bool js_servernetadr_t_SetConnectionPort									(int num_args, bool is_ctor, intptr_t magic);
static bool js_servernetadr_t_SetIP												(int num_args, bool is_ctor, intptr_t magic);
static bool js_servernetadr_t_Assign											(int num_args, bool is_ctor, intptr_t magic);
static bool js_servernetadr_t_GetQueryPort										(int num_args, bool is_ctor, intptr_t magic);
static bool js_servernetadr_t_GetConnectionPort									(int num_args, bool is_ctor, intptr_t magic);
static bool js_servernetadr_t_GetIP												(int num_args, bool is_ctor, intptr_t magic);
static bool js_servernetadr_t_GetConnectionAddressString						(int num_args, bool is_ctor, intptr_t magic);
static bool js_servernetadr_t_GetQueryAddressString								(int num_args, bool is_ctor, intptr_t magic);
static bool js_servernetadr_t_IsLessThan										(int num_args, bool is_ctor, intptr_t magic);

// gameserveritem_t
static bool js_gameserveritem_t_Construct										(int num_args, bool is_ctor, intptr_t magic);
static bool js_gameserveritem_t_SetName											(int num_args, bool is_ctor, intptr_t magic);
static bool js_gameserveritem_t_GetName											(int num_args, bool is_ctor, intptr_t magic);

// SteamNetworkingIPAddr
static bool js_SteamNetworkingIPAddr_Clear										(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIPAddr_SetIPv6									(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIPAddr_SetIPv4									(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIPAddr_SetIPv6LocalHost							(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIPAddr_ToString									(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIPAddr_IsIPv6AllZeros								(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIPAddr_IsIPv4										(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIPAddr_IsLocalHost								(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIPAddr_ParseString								(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIPAddr_IsEqualTo									(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIPAddr_IsFakeIP									(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIPAddr_GetIPv4									(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIPAddr_GetFakeIPType								(int num_args, bool is_ctor, intptr_t magic);

// SteamNetworkingIdentity
static bool js_SteamNetworkingIdentity_Clear									(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIdentity_SetSteamID								(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIdentity_SetSteamID64								(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIdentity_SetPSNID									(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIdentity_SetStadiaID								(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIdentity_SetIPAddr								(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIdentity_SetIPv4Addr								(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIdentity_SetLocalHost								(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIdentity_ToString									(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIdentity_IsInvalid								(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIdentity_SetXboxPairwiseID						(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIdentity_IsFakeIP									(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIdentity_IsLocalHost								(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIdentity_SetGenericString							(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIdentity_SetGenericBytes							(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIdentity_IsEqualTo								(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIdentity_ParseString								(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIdentity_GetSteamID								(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIdentity_GetSteamID64								(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIdentity_GetPSNID									(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIdentity_GetStadiaID								(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIdentity_GetXboxPairwiseID						(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIdentity_GetGenericString							(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIdentity_GetIPAddr								(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIdentity_GetIPv4									(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIdentity_GetFakeIPType							(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingIdentity_GetGenericBytes							(int num_args, bool is_ctor, intptr_t magic);

// SteamNetworkingMessage_t
static bool js_SteamNetworkingMessage_t_Release									(int num_args, bool is_ctor, intptr_t magic);

// SteamNetworkingConfigValue_t
static bool js_SteamNetworkingConfigValue_t_SetInt32							(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingConfigValue_t_SetInt64							(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingConfigValue_t_SetFloat							(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingConfigValue_t_SetPtr								(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamNetworkingConfigValue_t_SetString							(int num_args, bool is_ctor, intptr_t magic);

// SteamDatagramHostedAddress
static bool js_SteamDatagramHostedAddress_Clear									(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamDatagramHostedAddress_SetDevAddress							(int num_args, bool is_ctor, intptr_t magic);
static bool js_SteamDatagramHostedAddress_GetPopID								(int num_args, bool is_ctor, intptr_t magic);

// ISteamClient
static bool js_ISteamClient_CreateSteamPipe										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamClient_ConnectToGlobalUser									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamClient_CreateLocalUser										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamClient_BReleaseSteamPipe									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamClient_BShutdownIfAllPipesClosed							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamClient_ReleaseUser											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamClient_SetLocalIPBinding									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamClient_GetISteamUser										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamClient_GetISteamGameServer									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamClient_GetISteamFriends									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamClient_GetISteamUtils										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamClient_GetISteamMatchmaking								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamClient_GetISteamMatchmakingServers							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamClient_GetISteamGenericInterface							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamClient_GetISteamUserStats									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamClient_GetISteamGameServerStats							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamClient_GetISteamApps										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamClient_GetISteamNetworking									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamClient_GetISteamRemoteStorage								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamClient_GetISteamScreenshots								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamClient_GetISteamGameSearch									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamClient_GetISteamHTTP										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamClient_GetISteamController									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamClient_GetISteamUGC										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamClient_GetISteamAppList									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamClient_GetISteamMusic										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamClient_GetISteamMusicRemote								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamClient_GetISteamHTMLSurface								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamClient_GetISteamInventory									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamClient_GetISteamVideo										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamClient_GetISteamParentalSettings							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamClient_GetISteamInput										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamClient_GetISteamParties									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamClient_GetISteamRemotePlay									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamClient_GetIPCCallCount										(int num_args, bool is_ctor, intptr_t magic);

// ISteamUser
static bool js_SteamUser_v023													(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUser_GetHSteamUser											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUser_InitiateGameConnection_DEPRECATED						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUser_GetGameBadgeLevel										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUser_GetPlayerSteamLevel									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUser_BLoggedOn												(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUser_GetUserDataFolder										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUser_BIsBehindNAT											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUser_GetEncryptedAppTicket									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUser_BIsPhoneVerified										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUser_BIsTwoFactorEnabled									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUser_BIsPhoneIdentifying									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUser_BIsPhoneRequiringVerification							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUser_BSetDurationControlOnlineState						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUser_GetSteamID											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUser_RequestEncryptedAppTicket								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUser_RequestStoreAuthURL									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUser_GetMarketEligibility									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUser_GetDurationControl									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUser_TerminateGameConnection_DEPRECATED					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUser_TrackAppUsageEvent									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUser_StartVoiceRecording									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUser_StopVoiceRecording									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUser_EndAuthSession										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUser_CancelAuthTicket										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUser_AdvertiseGame											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUser_GetAvailableVoice										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUser_GetVoice												(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUser_DecompressVoice										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUser_GetVoiceOptimalSampleRate								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUser_GetAuthSessionTicket									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUser_GetAuthTicketForWebApi								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUser_BeginAuthSession										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUser_UserHasLicenseForApp									(int num_args, bool is_ctor, intptr_t magic);

// ISteamFriends
static bool js_SteamFriends_v017												(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetPersonaName										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetFriendPersonaName								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetFriendPersonaNameHistory						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetPlayerNickname									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetFriendsGroupName								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetClanName										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetClanTag											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetFriendRichPresence								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetFriendRichPresenceKeyByIndex					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetProfileItemPropertyString						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_SetPersonaName										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetFriendByIndex									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetClanByIndex										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_DownloadClanActivityCounts							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetFriendFromSourceByIndex							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_RequestClanOfficerList								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetClanOwner										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetClanOfficerByIndex								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetCoplayFriend									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_JoinClanChatRoom									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetChatMemberByIndex								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetFollowerCount									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_IsFollowing										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_EnumerateFollowingList								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_RequestEquippedProfileItems						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetPersonaState									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetFriendRelationship								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetFriendPersonaState								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetUserRestrictions								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetFriendCoplayGame								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetProfileItemPropertyUint							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetFriendCount										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetFriendSteamLevel								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetFriendsGroupCount								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetFriendsGroupMembersCount						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetClanCount										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetFriendCountFromSource							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetSmallFriendAvatar								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetMediumFriendAvatar								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetLargeFriendAvatar								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetClanOfficerCount								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetFriendRichPresenceKeyCount						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetCoplayFriendCount								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetFriendCoplayTime								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetClanChatMemberCount								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetClanChatMessage									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetFriendMessage									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetNumChatsWithUnreadPriorityMessages				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetFriendGamePlayed								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_HasFriend											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetClanActivityCounts								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_IsUserInSource										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_RequestUserInformation								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_SetRichPresence									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_InviteUserToGame									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_LeaveClanChatRoom									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_SendClanChatMessage								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_IsClanChatAdmin									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_IsClanChatWindowOpenInSteam						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_OpenClanChatWindowInSteam							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_CloseClanChatWindowInSteam							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_SetListenForFriendsMessages						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_ReplyToFriendMessage								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_IsClanPublic										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_IsClanOfficialGameGroup							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_RegisterProtocolInOverlayBrowser					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_BHasEquippedProfileItem							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetFriendsGroupIDByIndex							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_GetFriendsGroupMembersList							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_SetInGameVoiceSpeaking								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_ActivateGameOverlay								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_ActivateGameOverlayToUser							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_ActivateGameOverlayToWebPage						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_ActivateGameOverlayToStore							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_SetPlayedWith										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_ActivateGameOverlayInviteDialog					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_ClearRichPresence									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_RequestFriendRichPresence							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog	(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamFriends_ActivateGameOverlayInviteDialogConnectString		(int num_args, bool is_ctor, intptr_t magic);

// ISteamUtils
static bool js_SteamUtils_v010													(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUtils_GetSecondsSinceAppActive								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUtils_GetSecondsSinceComputerActive						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUtils_GetConnectedUniverse									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUtils_GetServerRealTime									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUtils_GetAppID												(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUtils_GetAPICallFailureReason								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUtils_GetIPCCallCount										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUtils_GetEnteredGamepadTextLength							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUtils_GetIPv6ConnectivityState								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUtils_GetIPCountry											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUtils_GetSteamUILanguage									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUtils_GetImageSize											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUtils_GetImageRGBA											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUtils_IsAPICallCompleted									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUtils_GetAPICallResult										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUtils_IsOverlayEnabled										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUtils_BOverlayNeedsPresent									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUtils_ShowGamepadTextInput									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUtils_GetEnteredGamepadTextInput							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUtils_IsSteamRunningInVR									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUtils_IsSteamInBigPictureMode								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUtils_IsVRHeadsetStreamingEnabled							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUtils_IsSteamChinaLauncher									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUtils_InitFilterText										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUtils_IsSteamRunningOnSteamDeck							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUtils_ShowFloatingGamepadTextInput							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUtils_DismissFloatingGamepadTextInput						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUtils_GetCurrentBatteryPower								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUtils_SetOverlayNotificationPosition						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUtils_SetOverlayNotificationInset							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUtils_StartVRDashboard										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUtils_SetVRHeadsetStreamingEnabled							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUtils_SetGameLauncherMode									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUtils_CheckFileSignature									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUtils_FilterText											(int num_args, bool is_ctor, intptr_t magic);

// ISteamMatchmaking
static bool js_SteamMatchmaking_v009											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_GetFavoriteGameCount							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_AddFavoriteGame								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_GetNumLobbyMembers								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_GetLobbyDataCount								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_GetLobbyChatEntry								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_GetLobbyMemberLimit							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_GetFavoriteGame								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_RemoveFavoriteGame								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_InviteUserToLobby								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_SetLobbyData									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_GetLobbyDataByIndex							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_DeleteLobbyData								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_SendLobbyChatMsg								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_RequestLobbyData								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_GetLobbyGameServer								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_SetLobbyMemberLimit							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_SetLobbyType									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_SetLobbyJoinable								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_SetLobbyOwner									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_SetLinkedLobby									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_RequestLobbyList								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_GetLobbyByIndex								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_CreateLobby									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_JoinLobby										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_GetLobbyMemberByIndex							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_GetLobbyOwner									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_AddRequestLobbyListStringFilter				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_AddRequestLobbyListNumericalFilter				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_AddRequestLobbyListNearValueFilter				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable		(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_AddRequestLobbyListDistanceFilter				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_AddRequestLobbyListResultCountFilter			(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter		(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_LeaveLobby										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_SetLobbyMemberData								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_SetLobbyGameServer								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_GetLobbyData									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmaking_GetLobbyMemberData								(int num_args, bool is_ctor, intptr_t magic);

// ISteamMatchmakingServerListResponse
static bool js_ISteamMatchmakingServerListResponse_ServerResponded				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmakingServerListResponse_ServerFailedToRespond		(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmakingServerListResponse_RefreshComplete				(int num_args, bool is_ctor, intptr_t magic);

// ISteamMatchmakingPingResponse
static bool js_ISteamMatchmakingPingResponse_ServerResponded					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmakingPingResponse_ServerFailedToRespond				(int num_args, bool is_ctor, intptr_t magic);

// ISteamMatchmakingPlayersResponse
static bool js_ISteamMatchmakingPlayersResponse_AddPlayerToList					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond			(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete			(int num_args, bool is_ctor, intptr_t magic);

// ISteamMatchmakingRulesResponse
static bool js_ISteamMatchmakingRulesResponse_RulesResponded					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmakingRulesResponse_RulesFailedToRespond				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmakingRulesResponse_RulesRefreshComplete				(int num_args, bool is_ctor, intptr_t magic);

// ISteamMatchmakingServers
static bool js_SteamMatchmakingServers_v002										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmakingServers_RequestInternetServerList				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmakingServers_RequestLANServerList					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmakingServers_RequestFriendsServerList				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmakingServers_RequestFavoritesServerList				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmakingServers_RequestHistoryServerList				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmakingServers_RequestSpectatorServerList				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmakingServers_ReleaseRequest							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmakingServers_CancelQuery								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmakingServers_RefreshQuery							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmakingServers_RefreshServer							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmakingServers_CancelServerQuery						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmakingServers_GetServerDetails						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmakingServers_IsRefreshing							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmakingServers_GetServerCount							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmakingServers_PingServer								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmakingServers_PlayerDetails							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMatchmakingServers_ServerRules								(int num_args, bool is_ctor, intptr_t magic);

// ISteamGameSearch
static bool js_SteamGameSearch_v001												(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameSearch_AddGameSearchParams								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameSearch_SearchForGameWithLobby							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameSearch_SearchForGameSolo								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameSearch_AcceptGame										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameSearch_DeclineGame										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameSearch_RetrieveConnectionDetails						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameSearch_EndGameSearch									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameSearch_SetGameHostParams								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameSearch_SetConnectionDetails							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameSearch_RequestPlayersForGame							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameSearch_HostConfirmGameStart							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameSearch_CancelRequestPlayersForGame						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameSearch_SubmitPlayerResult								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameSearch_EndGame											(int num_args, bool is_ctor, intptr_t magic);

// ISteamParties
static bool js_SteamParties_v002												(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamParties_GetNumActiveBeacons								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamParties_GetBeaconByIndex									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamParties_JoinParty											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamParties_CreateBeacon										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamParties_ChangeNumOpenSlots									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamParties_GetBeaconDetails									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamParties_GetNumAvailableBeaconLocations						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamParties_GetAvailableBeaconLocations						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamParties_DestroyBeacon										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamParties_GetBeaconLocationData								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamParties_OnReservationCompleted								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamParties_CancelReservation									(int num_args, bool is_ctor, intptr_t magic);

// ISteamRemoteStorage
static bool js_SteamRemoteStorage_v016											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_FileWrite									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_FileReadAsyncComplete						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_FileForget									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_FileDelete									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_SetSyncPlatforms								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_FileWriteStreamWriteChunk					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_FileWriteStreamClose							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_FileWriteStreamCancel						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_FileExists									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_FilePersisted								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_GetQuota										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_IsCloudEnabledForAccount						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_IsCloudEnabledForApp							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_GetUGCDownloadProgress						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_GetUGCDetails								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_UpdatePublishedFileFile						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_UpdatePublishedFilePreviewFile				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_UpdatePublishedFileTitle						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_UpdatePublishedFileDescription				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_UpdatePublishedFileVisibility				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_UpdatePublishedFileTags						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription		(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_BeginFileWriteBatch							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_EndFileWriteBatch							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_FileRead										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_GetFileSize									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_GetFileCount									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_UGCRead										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_GetCachedUGCCount							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_GetLocalFileChangeCount						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_FileWriteAsync								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_FileReadAsync								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_FileShare									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_FileWriteStreamOpen							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_UGCDownload									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_GetCachedUGCHandle							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_PublishWorkshopFile							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_CreatePublishedFileUpdateRequest				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_CommitPublishedFileUpdate					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_GetPublishedFileDetails						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_DeletePublishedFile							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_EnumerateUserPublishedFiles					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_SubscribePublishedFile						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_EnumerateUserSubscribedFiles					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_UnsubscribePublishedFile						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_GetPublishedItemVoteDetails					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_UpdateUserPublishedItemVote					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_GetUserPublishedItemVoteDetails				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_PublishVideo									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_SetUserPublishedFileAction					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction			(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_UGCDownloadToLocation						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_GetFileTimestamp								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_GetSyncPlatforms								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_GetFileNameAndSize							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_GetLocalFileChange							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemoteStorage_SetCloudEnabledForApp						(int num_args, bool is_ctor, intptr_t magic);

// ISteamUserStats
static bool js_SteamUserStats_v012												(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_RequestCurrentStats								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_GetStatInt32										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_GetStatFloat										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_SetStatInt32										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_SetStatFloat										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_UpdateAvgRateStat								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_GetAchievement									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_SetAchievement									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_ClearAchievement									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_GetAchievementAndUnlockTime						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_StoreStats										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_IndicateAchievementProgress						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_GetUserStatInt32									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_GetUserStatFloat									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_GetUserAchievement								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_GetUserAchievementAndUnlockTime					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_ResetAllStats									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_GetDownloadedLeaderboardEntry					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_GetAchievementAchievedPercent					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_GetGlobalStatInt64								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_GetGlobalStatDouble								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_GetAchievementProgressLimitsInt32				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_GetAchievementProgressLimitsFloat				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_GetAchievementIcon								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_GetLeaderboardEntryCount							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_GetMostAchievedAchievementInfo					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_GetNextMostAchievedAchievementInfo				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_GetGlobalStatHistoryInt64						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_GetGlobalStatHistoryDouble						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_GetAchievementDisplayAttribute					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_GetAchievementName								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_GetLeaderboardName								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_GetNumAchievements								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_GetLeaderboardSortMethod							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_GetLeaderboardDisplayType						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_RequestUserStats									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_FindOrCreateLeaderboard							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_FindLeaderboard									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_DownloadLeaderboardEntries						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_DownloadLeaderboardEntriesForUsers				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_UploadLeaderboardScore							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_AttachLeaderboardUGC								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_GetNumberOfCurrentPlayers						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_RequestGlobalAchievementPercentages				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUserStats_RequestGlobalStats								(int num_args, bool is_ctor, intptr_t magic);

// ISteamApps
static bool js_SteamApps_v008													(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamApps_BIsSubscribed											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamApps_BIsLowViolence										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamApps_BIsCybercafe											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamApps_BIsVACBanned											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamApps_BIsSubscribedApp										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamApps_BIsDlcInstalled										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamApps_BIsSubscribedFromFreeWeekend							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamApps_BGetDLCDataByIndex									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamApps_GetCurrentBetaName									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamApps_MarkContentCorrupt									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamApps_BIsAppInstalled										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamApps_GetDlcDownloadProgress								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamApps_BIsSubscribedFromFamilySharing						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamApps_BIsTimedTrial											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamApps_SetDlcContext											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamApps_GetCurrentGameLanguage								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamApps_GetAvailableGameLanguages								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamApps_GetLaunchQueryParam									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamApps_GetEarliestPurchaseUnixTime							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamApps_GetInstalledDepots									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamApps_GetAppInstallDir										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamApps_GetDLCCount											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamApps_GetAppBuildId											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamApps_GetLaunchCommandLine									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamApps_InstallDLC											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamApps_UninstallDLC											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamApps_RequestAppProofOfPurchaseKey							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamApps_RequestAllProofOfPurchaseKeys							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamApps_GetAppOwner											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamApps_GetFileDetails										(int num_args, bool is_ctor, intptr_t magic);

// ISteamNetworking
static bool js_SteamNetworking_v006												(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworking_SendP2PPacket									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworking_IsP2PPacketAvailable							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworking_ReadP2PPacket									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworking_AcceptP2PSessionWithUser						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworking_CloseP2PSessionWithUser							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworking_CloseP2PChannelWithUser							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworking_GetP2PSessionState								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworking_AllowP2PPacketRelay								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworking_DestroySocket									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworking_DestroyListenSocket								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworking_SendDataOnSocket								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworking_IsDataAvailableOnSocket							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworking_RetrieveDataFromSocket							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworking_IsDataAvailable									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworking_RetrieveData									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworking_GetSocketInfo									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworking_GetListenSocketInfo								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworking_CreateListenSocket								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworking_CreateP2PConnectionSocket						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworking_CreateConnectionSocket							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworking_GetSocketConnectionType							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworking_GetMaxPacketSize								(int num_args, bool is_ctor, intptr_t magic);

// ISteamScreenshots
static bool js_SteamScreenshots_v003											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamScreenshots_WriteScreenshot								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamScreenshots_AddScreenshotToLibrary							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamScreenshots_AddVRScreenshotToLibrary						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamScreenshots_TriggerScreenshot								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamScreenshots_HookScreenshots								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamScreenshots_SetLocation									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamScreenshots_TagUser										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamScreenshots_TagPublishedFile								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamScreenshots_IsScreenshotsHooked							(int num_args, bool is_ctor, intptr_t magic);

// ISteamMusic
static bool js_SteamMusic_v001													(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusic_BIsEnabled											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusic_BIsPlaying											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusic_GetPlaybackStatus									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusic_Play													(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusic_Pause												(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusic_PlayPrevious											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusic_PlayNext												(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusic_SetVolume											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusic_GetVolume											(int num_args, bool is_ctor, intptr_t magic);

// ISteamMusicRemote
static bool js_SteamMusicRemote_v001											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusicRemote_RegisterSteamMusicRemote						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusicRemote_DeregisterSteamMusicRemote						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusicRemote_BIsCurrentMusicRemote							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusicRemote_BActivationSuccess								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusicRemote_SetDisplayName									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusicRemote_SetPNGIcon_64x64								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusicRemote_EnablePlayPrevious								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusicRemote_EnablePlayNext									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusicRemote_EnableShuffled									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusicRemote_EnableLooped									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusicRemote_EnableQueue									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusicRemote_EnablePlaylists								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusicRemote_UpdatePlaybackStatus							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusicRemote_UpdateShuffled									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusicRemote_UpdateLooped									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusicRemote_UpdateVolume									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusicRemote_CurrentEntryWillChange							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusicRemote_CurrentEntryIsAvailable						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusicRemote_UpdateCurrentEntryText							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusicRemote_UpdateCurrentEntryCoverArt						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusicRemote_CurrentEntryDidChange							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusicRemote_QueueWillChange								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusicRemote_ResetQueueEntries								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusicRemote_SetQueueEntry									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusicRemote_SetCurrentQueueEntry							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusicRemote_QueueDidChange									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusicRemote_PlaylistWillChange								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusicRemote_ResetPlaylistEntries							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusicRemote_SetPlaylistEntry								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusicRemote_SetCurrentPlaylistEntry						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamMusicRemote_PlaylistDidChange								(int num_args, bool is_ctor, intptr_t magic);

// ISteamHTTP
static bool js_SteamHTTP_v003													(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTTP_CreateHTTPRequest										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTTP_CreateCookieContainer									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTTP_SetHTTPRequestContextValue							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTTP_SetHTTPRequestHeaderValue								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTTP_SetHTTPRequestGetOrPostParameter						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTTP_SendHTTPRequest										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTTP_SendHTTPRequestAndStreamResponse						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTTP_DeferHTTPRequest										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTTP_PrioritizeHTTPRequest									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTTP_GetHTTPResponseHeaderSize								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTTP_GetHTTPResponseHeaderValue							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTTP_GetHTTPResponseBodySize								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTTP_GetHTTPResponseBodyData								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTTP_GetHTTPStreamingResponseBodyData						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTTP_ReleaseHTTPRequest									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTTP_GetHTTPDownloadProgressPct							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTTP_SetHTTPRequestRawPostBody								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTTP_ReleaseCookieContainer								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTTP_SetCookie												(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTTP_SetHTTPRequestCookieContainer							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTTP_SetHTTPRequestUserAgentInfo							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTTP_GetHTTPRequestWasTimedOut								(int num_args, bool is_ctor, intptr_t magic);

// ISteamInput
static bool js_SteamInput_v006													(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_Init													(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_Shutdown												(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_SetInputActionManifestFilePath						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_BWaitForData											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_BNewDataAvailable									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_ShowBindingPanel										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_GetDeviceBindingRevision								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_RunFrame												(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_EnableDeviceCallbacks								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_ActivateActionSet									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_ActivateActionSetLayer								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_DeactivateActionSetLayer								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_DeactivateAllActionSetLayers							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_StopAnalogActionMomentum								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_TriggerVibration										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_TriggerVibrationExtended								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_TriggerSimpleHapticEvent								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_SetLEDColor											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_Legacy_TriggerHapticPulse							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_Legacy_TriggerRepeatedHapticPulse					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_GetConnectedControllers								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_GetActiveActionSetLayers								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_GetDigitalActionOrigins								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_GetAnalogActionOrigins								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_GetGamepadIndexForController							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_GetActionSetHandle									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_GetCurrentActionSet									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_GetDigitalActionHandle								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_GetAnalogActionHandle								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_GetControllerForGamepadIndex							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_GetDigitalActionData									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_GetStringForDigitalActionName						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_GetGlyphPNGForActionOrigin							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_GetGlyphSVGForActionOrigin							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_GetGlyphForActionOrigin_Legacy						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_GetStringForActionOrigin								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_GetStringForAnalogActionName							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_GetStringForXboxOrigin								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_GetGlyphForXboxOrigin								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_GetAnalogActionData									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_GetMotionData										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_GetInputTypeForHandle								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_GetActionOriginFromXboxOrigin						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_TranslateActionOrigin								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_GetRemotePlaySessionID								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInput_GetSessionInputConfigurationSettings					(int num_args, bool is_ctor, intptr_t magic);

// ISteamController
static bool js_SteamController_v008												(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamController_Init											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamController_Shutdown										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamController_ShowBindingPanel								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamController_GetControllerBindingRevision					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamController_RunFrame										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamController_ActivateActionSet								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamController_ActivateActionSetLayer							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamController_DeactivateActionSetLayer						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamController_DeactivateAllActionSetLayers					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamController_StopAnalogActionMomentum						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamController_TriggerHapticPulse								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamController_TriggerRepeatedHapticPulse						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamController_TriggerVibration								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamController_SetLEDColor										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamController_GetConnectedControllers							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamController_GetActiveActionSetLayers						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamController_GetDigitalActionOrigins							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamController_GetAnalogActionOrigins							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamController_GetGamepadIndexForController					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamController_GetActionSetHandle								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamController_GetCurrentActionSet								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamController_GetDigitalActionHandle							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamController_GetAnalogActionHandle							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamController_GetControllerForGamepadIndex					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamController_GetDigitalActionData							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamController_GetAnalogActionData								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamController_GetGlyphForActionOrigin							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamController_GetStringForActionOrigin						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamController_GetStringForXboxOrigin							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamController_GetGlyphForXboxOrigin							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamController_GetMotionData									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamController_GetInputTypeForHandle							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamController_GetActionOriginFromXboxOrigin					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamController_TranslateActionOrigin							(int num_args, bool is_ctor, intptr_t magic);

// ISteamUGC
static bool js_SteamUGC_v018													(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_CreateQueryUserUGCRequest								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_CreateQueryAllUGCRequestPage							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_CreateQueryAllUGCRequestCursor							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_CreateQueryUGCDetailsRequest							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_SendQueryUGCRequest									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_RequestUGCDetails										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_CreateItem												(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_StartItemUpdate										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_SubmitItemUpdate										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_SetUserItemVote										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_GetUserItemVote										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_AddItemToFavorites										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_RemoveItemFromFavorites								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_SubscribeItem											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_UnsubscribeItem										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_StartPlaytimeTracking									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_StopPlaytimeTracking									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_StopPlaytimeTrackingForAllItems						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_AddDependency											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_RemoveDependency										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_AddAppDependency										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_RemoveAppDependency									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_GetAppDependencies										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_DeleteItem												(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_GetWorkshopEULAStatus									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_GetQueryUGCResult										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_GetQueryUGCTag											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_GetQueryUGCTagDisplayName								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_GetQueryUGCPreviewURL									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_GetQueryUGCMetadata									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_GetQueryUGCChildren									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_GetQueryUGCStatistic									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_GetQueryUGCAdditionalPreview							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_GetQueryUGCKeyValueTag									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_GetQueryFirstUGCKeyValueTag							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_ReleaseQueryUGCRequest									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_AddRequiredTag											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_AddRequiredTagGroup									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_AddExcludedTag											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_SetReturnOnlyIDs										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_SetReturnKeyValueTags									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_SetReturnLongDescription								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_SetReturnMetadata										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_SetReturnChildren										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_SetReturnAdditionalPreviews							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_SetReturnTotalOnly										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_SetReturnPlaytimeStats									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_SetLanguage											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_SetAllowCachedResponse									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_SetCloudFileNameFilter									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_SetMatchAnyTag											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_SetSearchText											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_SetRankedByTrendDays									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_SetTimeCreatedDateRange								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_SetTimeUpdatedDateRange								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_AddRequiredKeyValueTag									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_SetItemTitle											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_SetItemDescription										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_SetItemUpdateLanguage									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_SetItemMetadata										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_SetItemVisibility										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_SetItemTags											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_SetItemContent											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_SetItemPreview											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_SetAllowLegacyUpload									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_RemoveAllItemKeyValueTags								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_RemoveItemKeyValueTags									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_AddItemKeyValueTag										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_AddItemPreviewFile										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_AddItemPreviewVideo									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_UpdateItemPreviewFile									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_UpdateItemPreviewVideo									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_RemoveItemPreview										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_AddContentDescriptor									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_RemoveContentDescriptor								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_GetItemInstallInfo										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_GetItemDownloadInfo									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_DownloadItem											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_BInitWorkshopForGameServer								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_ShowWorkshopEULA										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_GetQueryUGCNumTags										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_GetQueryUGCNumAdditionalPreviews						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_GetQueryUGCNumKeyValueTags								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_GetQueryUGCContentDescriptors							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_GetItemUpdateProgress									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_GetNumSubscribedItems									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_GetSubscribedItems										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_GetItemState											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_GetUserContentDescriptorPreferences					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamUGC_SuspendDownloads										(int num_args, bool is_ctor, intptr_t magic);

// ISteamAppList
static bool js_SteamAppList_v001												(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamAppList_GetNumInstalledApps								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamAppList_GetInstalledApps									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamAppList_GetAppName											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamAppList_GetAppInstallDir									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamAppList_GetAppBuildId										(int num_args, bool is_ctor, intptr_t magic);

// ISteamHTMLSurface
static bool js_SteamHTMLSurface_v005											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_Init											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_Shutdown										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_CreateBrowser									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_RemoveBrowser									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_LoadURL										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_SetSize										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_StopLoad										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_Reload											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_GoBack											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_GoForward										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_AddHeader										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_ExecuteJavascript								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_MouseUp										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_MouseDown										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_MouseDoubleClick								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_MouseMove										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_MouseWheel										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_KeyDown										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_KeyUp											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_KeyChar										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_SetHorizontalScroll							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_SetVerticalScroll								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_SetKeyFocus									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_ViewSource										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_CopyToClipboard								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_PasteFromClipboard								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_Find											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_StopFind										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_GetLinkAtPosition								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_SetCookie										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_SetPageScaleFactor								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_SetBackgroundMode								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_SetDPIScalingFactor							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_OpenDeveloperTools								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_AllowStartRequest								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_JSDialogResponse								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamHTMLSurface_FileLoadDialogResponse							(int num_args, bool is_ctor, intptr_t magic);

// ISteamInventory
static bool js_SteamInventory_v003												(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_GetResultStatus									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_GetResultTimestamp								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_GetNumItemsWithPrices							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_GetResultItems									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_GetResultItemProperty							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_CheckResultSteamID								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_GetAllItems										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_GetItemsByID										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_SerializeResult									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_DeserializeResult								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_GenerateItems									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_GrantPromoItems									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_AddPromoItem										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_AddPromoItems									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_ConsumeItem										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_ExchangeItems									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_TransferItemQuantity								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_TriggerItemDrop									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_TradeItems										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_LoadItemDefinitions								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_GetItemDefinitionIDs								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_GetItemDefinitionProperty						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_GetEligiblePromoItemDefinitionIDs				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_GetItemsWithPrices								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_GetItemPrice										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_RemoveProperty									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_SetPropertyString								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_SetPropertyBool									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_SetPropertyInt64									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_SetPropertyFloat									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_SubmitUpdateProperties							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_InspectItem										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_DestroyResult									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_SendItemDropHeartbeat							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs			(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_StartPurchase									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_RequestPrices									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamInventory_StartUpdateProperties							(int num_args, bool is_ctor, intptr_t magic);

// ISteamVideo
static bool js_SteamVideo_v003													(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamVideo_GetVideoURL											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamVideo_GetOPFSettings										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamVideo_AddTimelineHighlightMarker							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamVideo_AddTimelineTimestamp									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamVideo_AddTimelineRangeStart								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamVideo_AddTimelineRangeEnd									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamVideo_SetTimelineGameMode									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamVideo_IsBroadcasting										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamVideo_GetOPFStringForApp									(int num_args, bool is_ctor, intptr_t magic);

// ISteamParentalSettings
static bool js_SteamParentalSettings_v001										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamParentalSettings_BIsParentalLockEnabled					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamParentalSettings_BIsParentalLockLocked						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamParentalSettings_BIsAppBlocked								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamParentalSettings_BIsAppInBlockList							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamParentalSettings_BIsFeatureBlocked							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamParentalSettings_BIsFeatureInBlockList						(int num_args, bool is_ctor, intptr_t magic);

// ISteamRemotePlay
static bool js_SteamRemotePlay_v002												(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemotePlay_GetSessionCount									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemotePlay_GetSessionID									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemotePlay_GetSessionClientFormFactor						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemotePlay_GetSessionSteamID								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemotePlay_GetSessionClientName							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemotePlay_BGetSessionClientResolution						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemotePlay_BStartRemotePlayTogether						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamRemotePlay_BSendRemotePlayTogetherInvite					(int num_args, bool is_ctor, intptr_t magic);

// ISteamNetworkingMessages
static bool js_SteamNetworkingMessages_js_v002									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingMessages_SendMessageToUser						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingMessages_GetSessionConnectionInfo				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingMessages_ReceiveMessagesOnChannel				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingMessages_AcceptSessionWithUser					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingMessages_CloseSessionWithUser					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingMessages_CloseChannelWithUser					(int num_args, bool is_ctor, intptr_t magic);

// ISteamNetworkingSockets
static bool js_SteamNetworkingSockets_js_v012									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_CreateFakeUDPPort						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_CreateListenSocketIP						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_ConnectByIPAddress						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_CreateListenSocketP2P					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_ConnectP2P								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_AcceptConnection							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_SendMessageToConnection					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_FlushMessagesOnConnection				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_GetConnectionRealTimeStatus				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_ConfigureConnectionLanes					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_InitAuthentication						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_GetAuthenticationStatus					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_CreatePollGroup							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_ConnectToHostedDedicatedServer			(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID			(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_GetHostedDedicatedServerAddress			(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket	(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_GetGameCoordinatorServerLogin			(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_ConnectP2PCustomSignaling				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_CreateListenSocketP2PFakeIP				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_GetRemoteFakeIPForConnection				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_CloseConnection							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_CloseListenSocket						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_SetConnectionUserData					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_GetConnectionName						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_GetConnectionInfo						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_GetListenSocketAddress					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_CreateSocketPair							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_GetIdentity								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_DestroyPollGroup							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_SetConnectionPollGroup					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_ReceivedRelayAuthTicket					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_ReceivedP2PCustomSignal					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_GetCertificateRequest					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_SetCertificate							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_BeginAsyncRequestFakeIP					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_GetConnectionUserData					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_SetConnectionName						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_SendMessages								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_ResetIdentity							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_RunCallbacks								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_GetFakeIP								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_ReceiveMessagesOnConnection				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_GetDetailedConnectionStatus				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_ReceiveMessagesOnPollGroup				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_FindRelayAuthTicketForServer				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingSockets_GetHostedDedicatedServerPort				(int num_args, bool is_ctor, intptr_t magic);

// ISteamNetworkingUtils
static bool js_ISteamNetworkingUtils_AllocateMessage							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingUtils_InitRelayNetworkAccess						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingUtils_ConvertPingLocationToString				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString			(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingUtils_GetRelayNetworkStatus						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingUtils_GetIPv4FakeIPType							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingUtils_GetRealIdentityForFakeIP					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingUtils_GetConfigValue								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingUtils_IterateGenericEditableConfigValues			(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingUtils_SteamNetworkingIPAddr_GetFakeIPType		(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingUtils_GetLocalPingLocation						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations		(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingUtils_GetPingToDataCenter						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingUtils_GetDirectPingToPOP							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingUtils_GetPOPCount								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingUtils_GetPOPList									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingUtils_ParsePingLocationString					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingUtils_CheckPingDataUpToDate						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingUtils_IsFakeIPv4									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingUtils_SetGlobalConfigValueInt32					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingUtils_SetGlobalConfigValueFloat					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingUtils_SetGlobalConfigValueString					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingUtils_SetGlobalConfigValuePtr					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingUtils_SetConnectionConfigValueInt32				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingUtils_SetConnectionConfigValueFloat				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingUtils_SetConnectionConfigValueString				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingUtils_SetConfigValue								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingUtils_SetConfigValueStruct						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString			(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString		(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingUtils_GetLocalTimestamp							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingUtils_GetConfigValueInfo							(int num_args, bool is_ctor, intptr_t magic);

// ISteamGameServer
static bool js_ISteamGameServer_SetProduct										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_SetGameDescription								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_SetModDir										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_SetDedicatedServer								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_LogOn											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_LogOnAnonymous									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_LogOff											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_SetMaxPlayerCount								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_SetBotPlayerCount								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_SetServerName									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_SetMapName										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_SetPasswordProtected							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_SetSpectatorPort								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_SetSpectatorServerName							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_ClearAllKeyValues								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_SetKeyValue										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_SetGameTags										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_SetGameData										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_SetRegion										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_SetAdvertiseServerActive						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_EndAuthSession									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_CancelAuthTicket								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_GetGameplayStats								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_SendUserDisconnect_DEPRECATED					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_BLoggedOn										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_BSecure											(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_WasRestartRequested								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_RequestUserGroupStatus							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_HandleIncomingPacket							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_SendUserConnectAndAuthenticate_DEPRECATED		(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_BUpdateUserData									(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_GetSteamID										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_GetServerReputation								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_AssociateWithClan								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_ComputeNewPlayerCompatibility					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_CreateUnauthenticatedUserConnection				(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_GetAuthSessionTicket							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_BeginAuthSession								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_UserHasLicenseForApp							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_GetPublicIP										(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServer_GetNextOutgoingPacket							(int num_args, bool is_ctor, intptr_t magic);

// ISteamGameServerStats
static bool js_ISteamGameServerStats_RequestUserStats							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServerStats_StoreUserStats								(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServerStats_GetUserStatInt32							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServerStats_GetUserStatFloat							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServerStats_GetUserAchievement							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServerStats_SetUserStatInt32							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServerStats_SetUserStatFloat							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServerStats_UpdateUserAvgRateStat						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServerStats_SetUserAchievement							(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamGameServerStats_ClearUserAchievement						(int num_args, bool is_ctor, intptr_t magic);

// ISteamNetworkingFakeUDPPort
static bool js_ISteamNetworkingFakeUDPPort_DestroyFakeUDPPort					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingFakeUDPPort_ScheduleCleanup						(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingFakeUDPPort_SendMessageToFakeIP					(int num_args, bool is_ctor, intptr_t magic);
static bool js_ISteamNetworkingFakeUDPPort_ReceiveMessages						(int num_args, bool is_ctor, intptr_t magic);

