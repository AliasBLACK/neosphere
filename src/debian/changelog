minisphere (4.3.1) trusty; urgency=low

  * Improves Sphere v2 behavior: minisphere will now run a frame loop until there
    are no more Dispatch API jobs active before exiting.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Tue, 8 Nov 2016 00:00:00 -0500

minisphere (4.3.0) trusty; urgency=low

  * Adds a new Dispatch API for setting up asynchronous jobs.  Jobs are called
    from the event loop; for example, `Dispatch.onUpdate()` is processed at the
    start of every frame.
  * Adds support for the JavaScript Reflect API.
  * Adds native support for JavaScript Promises via a polyfill.
  * Adds `struct.Reader` and `struct.Writer` which allow games to read and write
    binary data from files and network sockets.
  * Adds a `.fileName` property to objects such as Image and Sound, which returns
    the canonicalized name of the file the object was loaded from.
  * Adds `assert()` as an alias for `assert.ok()`, like in Node.js.
  * Renames the `fs` global object to `FS` to match other namespace-like objects.
  * Renames `mouse` to `Mouse.Default` to allow future support for multiple mice.
  * Renames `keyboard` to `Keyboard.Default` to allow future support for multiple
    keyboards.
  * Renames `ShapeGroup` to `Model`, better describing the object's purpose.
  * Removes the superfluous `SSJ` functions from the API.
  * Fixes several bugs discovered since minisphere 4.2.4 was released.
  * Updates the Sphere v2 API to use frame-perfect timing throughout.  For
    example, `system.now()` returns the number of frames processed since engine
    start.
  * Improves Sphere 1.x compatibility.  Many games which historically didn't run
    properly in minisphere, including Kefka's Revenge and Trial and Error, should
    now be fully playable.
  * Updates error messages to be more concise, making it clearer what went wrong
    at a quick glance.
  * miniRT no longer commandeers the legacy update and render scripts for itself.
  * When debugging with Sphere Studio, the gold "ssj" watermark in the bottom
    right is changed to blue to more easily distinguish interactive debugging
    sessions from command-line sessions.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Mon, 7 Nov 2016 00:00:00 -0500

minisphere (4.2.4) trusty; urgency=low

  * Adds streaming support for `TextDecoder`.
  * `system.abort()` now aborts unconditionally, as described in the API
    documentation.
  * Fixes a bug in the UTF-8 validation logic that caused Unicode strings to be
    double-encoded, leading to undesirable side effects and in rare cases, a
    crash.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Fri, 7 Oct 2016 00:00:00 -0500

minisphere (4.2.3) trusty; urgency=low

  * Adds support for the new JavaScript exponentiation operator (e.g.
    `x ** 2`), allowing powers to be calculated without the performance
    impact of a `Math.pow()` call.
  * `term.log()` is renamed to `term.print()`.
  * Updates the Encoding API implementation to more closely follow the
    algorithms described in the WHATWG standard.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Thu, 6 Oct 2016 00:00:00 -0500

minisphere (4.2.2) trusty; urgency=low

  * Adds a new property, `term.visible` to the `term` module and removes the
    `.show()` and `.hide()` methods.
  * Fixes the `struct` and `logger` modules, which were unintentionally broken by
    the changes in 4.2.0.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Wed, 28 Sep 2016 00:00:00 -0500

minisphere (4.2.1) trusty; urgency=low

  * The `ssj` global is now called `SSJ`, to align with usual JavaScript naming
    conventions for namespace-like objects.
  * The `terminal` standard library module is now called `term`.
  * Passing an invalid argument to a miniRT `random` module function will now
    result in a hard `AssertionError`, rather than just a debugger trap.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Wed, 21 Sep 2016 00:00:00 -0500

minisphere (4.2.0) trusty; urgency=low

  * Adds native joystick support to the Sphere v2 API.  Previously, using a
    joystick or gamepad required calling Sphere v1 legacy functions.
  * Adds a new module to miniRT, `joy`.  This provides a simplified joystick
    interface for games that don't need the full flexibility of the Sphere v2
    Joystick API.
  * Adds W3C Encoding support (`TextEncoder` and `TextDecoder` objects) to the
    Sphere v2 API.  This allows reading and writing text from ArrayBuffer views.
  * Simplifies the FileStream API.  All methods for reading and writing typed
    values from files have been removed, leaving only `read()` and `write()`
    which deal with ArrayBuffers directly.
  * The `kb` built-in object is now called `keyboard`, making keyboard input code
    significantly easier to read at the cost of some extra verbosity.
  * Fixes a long-standing map engine bug where the input person(s) can't be moved
    with the joystick.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Wed, 14 Sep 2016 00:00:00 -0500

minisphere (4.1.1) trusty; urgency=low

  * When starting a game with a JSON manifest, the main script is now run as a
    CommonJS module unless the manifest explicitly specifies `version: 1`.
  * `console` methods now actually send text to the console.
  * Sphere Studio now runs minisphere Console at V0 verbosity by default.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Wed, 24 Aug 2016 00:00:00 -0500

minisphere (4.1.0) trusty; urgency=low

  * Adds a new module to the standard library: `assert`, based on the Node.js
    built-in assert module.  Unlike `ssj.assert()`, the functions in this module
    throw an `AssertionError` when an assertion fails.
  * Renames a few `system` APIs.  See `RELEASES.md` for details.
  * Adds an option to show `ssj.trace()` output while debugging a game with
    Sphere Studio.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Mon, 22 Aug 2016 00:00:00 -0500

minisphere (4.0.1) trusty; urgency=low

  * `system.extensions` now includes properties for individual extensions.  Each
    has a value of `true`, which allows games to check for extensions via, e.g.
    `if (system.extensions.sphere_stateful_rng) { ... }`.
  * Fixes a bug which caused the `system.extensions` array to be missing entries.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Sun, 14 Aug 2016 00:00:00 -0500

minisphere (4.0.0) trusty; urgency=low

  * Introduces the new Sphere v2 API.  The entire Sphere v1 API, including the
    map engine, has been deprecated and is no longer recommended for use in new
    games.  For information on using the functions in the new API, see
    `docs/sphere2-api.txt`.
  * miniRT has been overhauled and repurposed as the reference implementation of
    the Sphere v2 standard library.  See `docs/minirt-api.txt` for more
    information.
  * Objects created using a Sphere v2 function--such as the `Image` constructor,
    `Color.Black` et al., and so on--are no longer compatible with the Sphere v1
    API.
  * Removes the constructors for legacy types such as ByteArray.
  * Removes support for on-the-fly transpilation of TypeScript and CoffeeScript.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Fri, 12 Aug 2016 00:00:00 -0500

minisphere (3.3.0) trusty; urgency=low

  * Now uses xoroshiro128+ as the random number generator instead of the slower
    Mersenne Twister.
  * Adds a new property to the RNG object, `RNG.state`.  This allows you to save
    and restore the internal state of the random number generator, for example to
    deter save scumming.
  * Adds a bunch of new API calls to make working with Color objects easier:
    `Color.fade()`, `Color.of()`, `Color.mix()` (which supersedes the old
    blending functions), `Color#name`, and a bunch of predefined colors such as
    `Color.Chartreuse`, `Color.Blue`, etc.
  * `Font`, `Mixer`, `ShaderProgram` and `WindowStyle` now include static
    `.Default` properties which refer to the corresponding built-in default
    assets.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Tue, 31 May 2016 00:00:00 -0500

minisphere (3.2.0) trusty; urgency=low

  * The module system has been overhauled to work more like Node.js, and now has
    support for `package.json` files, parsing JSON files as objects, and useful
    APIs such as `require.cache`, `module.loaded`, and `module.require`.
  * `require()` can now load JS modules from anywhere in a game's file system by
    prefixing the module ID with a SphereFS alias (`@/`, `~/`, or `#/`).
  * Adds support for `console.log()` and friends.  `stdout` is reserved for
    under-the-hood logging, so `console` output will only be visible when SSJ is
    attached.
  * Improves frameskip behavior: The frame timer is now reset only if the skip
    limit is hit.  This should ensure a more consistent update rate even under
    lag conditions.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Sun, 22 May 2016 00:00:00 -0500

minisphere (3.1.2) trusty; urgency=low

  * Fixes an issue where sounds were reinitialized whenever a script called
    `Sound#play()` (including the first time), potentially triggering a deadlock
    bug in Allegro 5.0.  This affects Linux only, as Allegro 5.2 is used on
    Windows.
  * Fixes a regression in minisphere 3.1.0 which could cause games with an
    otherwise valid `.s2gm` manifest to fail to start with an Unsupported Engine
    error.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Wed, 11 May 2016 00:00:00 -0500

minisphere (3.1.1) trusty; urgency=low

  * Fixes a bug in miniRT/music where it tried to call `console.write()` instead
    of `console.log()`, causing it to throw an error and potentially crash the
    game when logging error messages.
  * Sound.play() will now accept a Mixer as its second or third argument.
    Previously the Mixer had to be passed to the Sound constructor, which was
    awkward.
  * The map engine now uses its own mixer for map-defined BGM.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Tue, 10 May 2016 00:00:00 -0500

minisphere (3.1.0) trusty; urgency=low

  * SphereFS now uses single-character aliases: `#/` for built-in engine assets,
    `@/` for the root of the sandbox, and `~/` for the user data directory (for
    save data)
  * Changes the user data directory name back to "minisphere" to be more friendly
    to Linux users.
  * Adds some new components to miniRT: miniRT/binary for easy loading of
    structured binary data, miniRT/xml for XML parsing and DOM generation, and
    miniRT/prim to pre-render expensive-to-draw primitives like circles.
  * Adds a new Transform object which allows working with transformation
    matrices.
  * Improves the Galileo API: Shapes can now be drawn directly, Groups have a
    `transform` property which allows their transformation matrices to be
    manipulated, and shader uniforms can be set using `group.setInt()`,
    `group.setFloat()`, and `group.setMatrix()`.
  * Adds new Galileo Shape types `SHAPE_LINE_LOOP` and `SHAPE_LINE_STRIP`.
  * minisphere now looks for CommonJS modules in `lib/` instead of `commonjs/`.
  * `Async()` is now called `DispatchScript()` for API consistency.
  * `ListeningSocket` is now called `Server`.
  * You can now use `-0` through `-4` command line options to specify the
    engine log verbosity level.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Sun, 7 May 2016 00:00:00 -0500

minisphere (3.0.8) trusty; urgency=low

  * Fixes a bug where minisphere would crash instead of showing an error
    message if it was unable to create a render context.
  * SSJ will now continue with the previous course of action if given a null
    command.  This only works for certain commands.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Sun, 17 Apr 2016 00:00:00 -0500

minisphere (3.0.7) trusty; urgency=low

  * Fixes an issue where persons with large ignore lists would cause an inordinate
    amount of lag.  This was caused by the engine checking persons' ignore lists
    before their hitboxes.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Thu, 14 Apr 2016 00:00:00 -0500

minisphere (3.0.6) trusty; urgency=low

  * Reverts to the pre-3.0.4 method of map rendering.  It turns out that Allegro's
    sprite batcher is actually pretty awesome.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Mon, 11 Apr 2016 00:00:00 -0500

minisphere (3.0.5) trusty; urgency=low

  * Fixes a performance regression in 3.0.4 related to Galileo map rendering and
    animated tilesets.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Sun, 10 Apr 2016 00:00:00 -0500

minisphere (3.0.4) trusty; urgency=low

  * Fixes a memory management bug in Galileo which caused it to leak potentially
    massive amounts of memory in games which generate a lot of Shape objects.
  * Fixes a bug in the Windows build where stdout couldn't be redirected.
  * Updates the map engine to use the Galileo graphics subsystem internally, which
    improves rendering performance in most cases.
  * Fixes a segfault when rendering a Galileo primitive with no vertices defined.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Sat, 9 Apr 2016 00:00:00 -0500

minisphere (3.0.3) trusty; urgency=low

  * While debugging in Sphere Studio, variables are now sorted alphabetically in
    the Debugger pane.
  * Fixes a bug where GetDefaultShaderProgram() would attempt to compile the same
    source for both the vertex and fragment shaders, causing the call to fail.
  * Implements RNG.random(), an API function which has been documented for a while
    without actually being present.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Tue, 5 Apr 2016 00:00:00 -0500

minisphere (3.0.2) trusty; urgency=low

  * Improves the file API: The FileStream object now includes methods for
    directly reading and writing integers, strings, and floats in addition to
    the standard ArrayBuffer-based I/O.
  * The Windows build now uses Allegro 5.2.0, the latest stable version.
  * Fixes a bug in the Sphere Studio debugger where pressing F10 would perform a
    Step Out instead of Step Over.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Fri, 1 Apr 2016 00:00:00 -0500

minisphere (3.0.1) trusty; urgency=low

  * Fixes a bug where running `minisphere` from the command line and giving an
    invalid or nonexistent game path would cause the engine to segfault trying
    to display an error message.
  * Adds Sphere 1.x API functions `SetLayerWidth()` and `SetLayerHeight()`.  For
    convenience, I also added `SetLayerSize()` to set both dimensions at once.
  * In Sphere Studio, the Debugger pane is now hidden when not actively
    debugging.  This helps maximize screen real estate without forcing the user
    to set the pane to autohide.
  * Fixes a bug where receiving a malformed source code request from the
    debugger would cause a segfault.  This wasn't a security risk right now, but
    might have become one in the future once I add remote debugging support.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Tue, 29 Mar 2016 00:00:00 -0500

minisphere (3.0.0) trusty; urgency=low

  * The Windows redistributable and GDK downloads have been combined into a single
    installer.  The engine is so compact that there's nothing gained from having
    separate installers.
  * minisphere is now officially supported on Linux! `.deb` binary and `.tar.gz`
    source packages will be provided for all minisphere releases going forward.
  * miniRT is completely revamped and modernized.  All miniRT components have been
    rewritten as CommonJS modules which allows them to be pulled in individually
    as needed, instead of all at once using a global RequireScript().
  * A complete API reference for miniRT is now included with the engine.
  * Introducing the brand-new command-line debugger, SSJ!  SSJ can be started by
    running `ssj <game-path>` on the command line.  This brings single-step Sphere
    debugging to non-Windows platforms for the first time!
  * Strengthens the SphereFS sandbox: Using absolute file paths is no longer
    supported and will result in a sandbox violation error.
  * Adds provisional TypeScript support.  minisphere uses `ts.transpile()`
    internally to convert TypeScript to JavaScript, so some TypeScript features
    may not work as expected.  See the release notes for more details.
  * User data (screenshots, save files, etc.) is now stored in `<docs>/Sphere 2.0`
    instead of `<docs>/minisphere` as it was in prior versions.  SPK packages can
    be placed into the `games` subdirectory to have the startup game automatically
    pick them up.
  * minisphere now looks for CommonJS modules in `~sgm/commonjs`.
  * Enhances `Assert()` behavior.  If an assertion fails and the debugger is
    attached, choosing not to continue will cause a prompt breakpoint instead of
    throwing an error.  If the debugger is not attached, any failing assertions
    will be logged to `stderr` but otherwise ignored.
  * Improves fullscreen behavior: Games are letter/pillarboxed to maintain their
    aspect ratio when switching into fullscreen mode.
  * Screenshots are now given meaningful names based on the game filename and
    current date instead of random characters.
  * The frame rate is now visible by default whenever a game is started using the
    `spherun` command, and has been moved to the lower right corner of the screen.
  * When the debugger is attached, the engine now shows a small "SSJ" watermark in
    the lower left corner of the screen as a reminder.
  * The engine now waits for sounds to stop playing before freeing them, even if
    the Sound object goes out of scope.  This allows a common Sphere idiom
    `new Sound("munch.wav").play()` to work as expected.
  * With the debugger attached, you can now press F12 to pause game execution and
    turn over control to the attached debugger.  This can be useful when trying to
    debug glitches that don't lead to an exception.
  * You can now change the minisphere Console verbosity level when developing in
    Sphere Studio by going to the Settings Center page.  V2 (high-level logging)
    is the default.
  * Vastly improves object inspection in the Sphere Studio debugger.  Object
    contents will be displayed in a treeview, allowing you to drill down into
    properties, alleviating the need to scroll through a potentially huge JSON
    dump.
  * The command to run minisphere Console from the command line has changed from
    `msphere` to `spherun`.  This will be the standard command to start a
    Sphere 2.0 engine in developer mode going forward.  The end-user engine has
    been renamed as well, to `minisphere`.
  * `RNG.vary()` is now named `RNG.uniform()`.
  * New API: `DebugPrint()`, for logging low-level debug information without
    cluttering the console.  `DebugPrint()` output is visible only with a debugger
    attached.
  * New API: `DoEvents()`.  This function can be called in a long-running loop to
    avoid locking up the engine when you don't need to render anything or
    otherwise disturb the backbuffer.
  * `Print()` now accepts multiple values, which are separated by spaces when
    printed.
  * The `sphere` global object alias has been renamed to `global`, which is more
    obvious and matches Node.js.  Code relying on the `sphere` alias will need to
    be updated to work with minisphere 3.0.
  * All minisphere API functions, constructors, and constants have been marked as
    non-enumerable, to avoid bloating the output when examining the global object
    in the debugger.  Everything is still fully writable and configurable, so as
    not to prevent monkey-patching.
  * Fixes memory leaks in both Cell and minisphere, including a major one in
    Cell's packaging code which could have caused it to run out of memory during
    the installation step.
  * minisphere will no longer fail to start if the underlying platform doesn't
    support shaders.  Instead, the Galileo `ShaderProgram` constructor will throw
    an error if called.  Shaders are always disabled when the engine is compiled
    against Allegro 5.0.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Mon, 28 Mar 2016 00:00:00 -0500
