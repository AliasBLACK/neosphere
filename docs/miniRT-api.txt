miniRT API Reference
====================

Sphere v2 specifies a set of CommonJS modules known as the standard library.
The standard library provides high-level functionality above and beyond what
the lower-level Sphere API provides.

minisphere's implementation of the standard library is called miniRT and is
made up of several components, each of which is documented below.


`events` Module
---------------

A simple multicast delegate implementation which works similarly to events in
.NET.  An object exposes one or more delegates, which can have handler
functions registered to them by outside code.  When something interesting
happens, the object owning the delegate invokes it, which calls all the
registered handlers in turn.  In this way outside code can react to changing
situations without breaking encapsulation.

    const events = require('events');

new events.Delegate();

    Constructs a new delegate.  The delegate starts out empty, with no handlers
    attached.

Delegate:add(handler[, thisObj]);

    Registers the function `handler` with the delegate.  Whenever the delegate
    is invoked, all handlers registered at that time will be called in order.
    `thisObj` is optional and specifies an object to use for the `this` binding
    when calling `handler`.

    add() will throw an error if a matching handler has already been
    registered.

Delegate:remove(handler[, thisObj]);

    Removes a previously-registered handler from the delegate.  Throws an error
    if no matching handler is registered.


`joy` module
------------

The joy module provides a simplified interface for games that want to support
joystick input without the complexity of the Sphere v2 Joystick API.  Using
this module, a game can support joystick input for up to 4 players
simultaneously.

    const joy = require('joy');

joy.P1 [read-only]
joy.P2 [read-only]
joy.P3 [read-only]
joy.P4 [read-only]

    Gets a Joystick object representing a connected device.  `joy.P1` always
    refers to the same device within a session; likewise for the other
    properties.  If no suitable device is available for the specified player,
    `Joystick.Null` is returned instead.

    Note: Only connected devices with at least 5 buttons and 2 axes are
          considered.


`logger` Module
---------------

The logger module provides basic logging functionality.  Your game can use this
to log lines of text to a file complete with timestamps for each, often useful
for debugging purposes.

    const logger = require('logger');

new logger.Log(filename);

    Opens the given file for logging.  If the file cannot be opened for
    writing, an error is thrown.

Log#beginGroup(text);

    Begins an group.  All log entries in a group will be indented.  Groups can
    be nested.

Log#endGroup();

    Closes the most recently opened group.  There should be a corresponding
    endGroup() for each beginGroup() call.

Log#write(text);

    Writes a timestamped entry to the log.  `text` should contain no newline
    characters, although this is not enforced.


`music` Module
--------------

A flexible system based on Audialis for managing playback of background music.
The design, based on a pushdown stack, integrates well with finite state
machine architectures, which are often themselves based on a stack of states.
Code can push new BGM to the music stack, and when it is later popped, the
previous track resumes right where it left off.

miniRT supports crossfading, which helps smooth out BGM transitions.  The stack
can also be bypassed when needed, from simply switching out the song on top of
the stack with another track, to overriding the contents of the stack entirely,
which is often useful in RPGs to override the battle music for storyline
reasons.

    const music = require('music');

music.isAdjusting();

    true if the music volume is currently being adjusted by a call to
    music.adjust() (see below).

music.adjust(newVolume, duration);

    Smoothly adjusts the BGM volume level.  `newVolume` should be a value
    between 0 and 1, where 0 is silent and 1 is full volume.  `duration` is
    how long the adjustment should take, in seconds.

music.override(path[, fadeTime]);

    Overrides the BGM stack by playing the song specified by `path` at all
    times.  This may be useful in RPGs, for example to override the battle music
    during an important storyline event.

    `fadeTime` is the amount of crossfade to apply, in seconds.

    Note that overriding the BGM doesn't prevent music stack tracking.  So once
    the override is lifted (by calling reset()), the song on top of the stack at
    that time will play.

music.play(path[, fadeTime]);

    Replaces the song on top of the music stack with the track named by `path`.
    This is not the same as an override; if play() or push() is called
    afterwards, the BGM will change.

    `fadeTime` is the amount of crossfade to apply, in seconds.

music.pop([fadeTime]);

    Pops the topmost song off the music stack.  This will resume playing
    whatever song was playing when the corresponding push() was done.

music.push(path[, fadeTime]);

    Pushes a new song to the music stack.  If pop() is called later, the
    previous BGM will resume from where it left off.  `fadeTime` is the amount
    of crossfade to apply, in seconds.

music.reset([fadeTime]);

    Resets the BGM manager to normal operation, removing any outstanding
    overrides.  `fadeTime` is the amount of crossfade to apply, in seconds.


`pacts` Module
--------------

Pacts is an implementation of the Promises/A+ standard.  Promises are commonly
used in JavaScript frameworks such as Node.js to implement asynchronous logic.
Code which receives a promise can register a function to be called once when
the promise is fulfilled, which allows normal execution to continue while some
long-running operation takes place in the background.

Promises are so called because they represent a promise to return a value at
some later time.  Promises can be chained, which enables something akin to C#'s
`async` and `await` keywords.  This is done by having a promise's fulfillment
function itself return a promise, which will then be used as input for the next
link in the chain:

    loadHugePigFile()                    // <- makes a promise, then works in background
        .then(function(file) {           // <- receives fulfillment value
            return processPigFile(file); // <- also makes a promise
        }).then(function(numPigs) {      // <- receives fulfillment value
            console.log("Wow, that actually finished?!");
            console.log("Loaded " + numPigs + " big fat pigs! *MUNCH*");
        });

Outside code must not be allowed to resolve a promise prematurely.  Only the
code which made the promise should resolve it, and this is enforced through
encapsulation (the promise is resolved directly via a closure passed to the
Promise constructor).  This makes managing them difficult--which is where the
Pact object comes in.  A Pact can be used to make an unlimited number of
promises which can then be resolved through that pact.  In this way
encapsulation of the Promise object is maintained while keeping things simple
for the code handing them out.

    const pacts = require('pacts');

new pacts.Promise(fn);

    Makes a promise.  `fn` should be a function with the following signature,
    where `resolve` and `reject` are themselves functions:

        function fn(resolve, reject)

    This function should call resolve(value) to fulfill the promise with
    `value`, or reject(reason) to reject the promise.  `reason` is usually an
    Error object or derivative, but this is not enforced.  If `fn` throws, the
    promise will be rejected with the thrown value as the reason.

    To maintain encapsulation and prevent unrelated code from resolving a
    promise, resolution is only possible using the functions passed to `fn`.
    This makes things difficult for the code which is actually responsible for
    satisfying the promise.  Consider using a Pact (see below) to simplify the
    process.

Promise.all(promises);

    Makes a promise which is fulfilled only when all promises in the array
    `promises` have been fulfilled.  If any of the promises is rejected, the
    Promise.all() promise will be rejected immediately with the same reason
    value.

Promise.race(promises);

    Makes a promise which resolves once any promise in `promises` is resolved,
    with the same value or reason.

Promise.reject(reason);

    Makes a promise which is rejected immediately with `reason` (usually an
    Error value).

Promise.resolve(value);

    Makes a promise which is fulfilled immediately with `value`.

new pacts.Pact();

    Creates a new pact.  As described above, Pacts are used to generate
    promises which can then be resolved through the pact.

Pact:promise();

    Makes a promise using this pact.  The promise can only be resolved through
    the pact used to make it.

Pact:resolve(promise, value);

    Fulfills a promise with `value`.  `promise` must have come from this pact.
    It is a TypeError to fulfill a promise using an unrelated pact.

Pact:reject(promise, reason);

    Rejects a promise with `reason` (usually an Error value).  `promise` must
    have come from this pact.  It is a TypeError to reject a promise using an
    unrelated pact.

Pact:welsh(reason);

    Rejects all outstanding promises from this pact.  `reason` is the value to
    reject with, usually an Error object.


`prim` Module
-------------

The prim module provides convenience functions for drawing common graphics
primitives such as circles and rectangles.  This mimics the primitives provided
in Sphere v1 but is based on Galileo, the Sphere v2 graphics framework.

    const prim = require('prim');

prim.blit(surface, x, y, image[, mask]);

    Draws an image as a textured quad.  `mask` is used to color the quad's
    vertices and has the effect of tinting the rendered image.  If no mask is
    specified, `Color.White` is assumed, which leaves the image colors as-is.

prim.circle(surface, x, y, radius, color[, color2]);

    Draws a solid circle.  If `color2` is given, draws a gradient circle where
    `color` is the color in the center and `color2` is the color at the edges
    of the circle.

prim.ellipse(surface, x, y, rx, ry, color[, color2]);

    Like prim.circle(), but draws a solid ellipse instead of a circle.  `rx` is
    the horizontal radius and `ry` the vertical radius.

prim.fill(surface, color);

    Fills a surface with a specified color.  This is effectively shorthand for
    drawing a rectangle of the specified color over the whole surface.

prim.line(surface, x1, y1, x2, y2, thickness, color[, color2]);

    Draws a line segment of given thickness from (x1,y1) to (x2,y2).  If
    `color2` is provided, draws a gradient line.

prim.lineCircle(surface, x, y, radius, color);

    Draws the outline of a circle.

prim.lineEllipse(surface, x, y, rx, ry, color);

    Like prim.lineCircle(), but draws the outline of an ellipse instead of a
    circle.

prim.lineRect(surface, x, y, width, height, thickness, color);

    Draws the outline of a rectangle with given thickness.

prim.point(suface, x, y, color);

    Draws a single pixel.

prim.rect(surface, x, y, width, height, color_ul[, color_ur, color_lr, color_ll]);

    Draws a solid rectangle.  If four colors are given instead of one, draws a
    gradient rectangle with each corner a different color.  Colors are given in
    clockwise order starting from the upper left.

prim.triangle(surface, x1, y1, x2, y2, x3, y3, color[, color2, color3]);

    Draws a solid triangle.  If three colors are given instead of one, draws a
    gradient triangle with each vertex a different color.


`random` Module
---------------

Many games don't need the full power of the Sphere `RNG` object and just need
a convenient way to generate random numbers for various purposes.

    const random = require('random');

random.chance(odds);

    Returns true or false depending on the given odds.  `odds` is a number in
    the range [0-1] specifying the odds of returning true.  For example, odds
    of 0.75 will return true 75% of the time.

random.discrete(min, max);

    Returns a random integer uniformly distributed within the range [min,max].

random.normal(mean, sigma);

    Returns a random floating point number from a normal distribution
    (sometimes called a bell curve) with expected value of `mean` and standard
    deviation `sigma`.

random.sample(array);

    Returns a randomly chosen item from the specified array.

random.string(length);

    Returns a randomly generated string consisting of alphanumeric characters.
    The generated string looks something like a YouTube video hash (e.g.
    YlHRHDrKS) and is useful for uniquely identifying things, for example to
    generate temporary filenames.

random.uniform(mean, variance);

    Returns a random floating point value uniformly distributed around `mean`
    with an absolute maximum deviation ("give or take") specified by
    `variance`.


`scenes` Module
---------------

A powerful scene engine which can run multiple operations in parallel, and then
sync the timelines up as needed.  An example of this would be where several
characters need to move into place for a cutscene, but may take differing
amounts of time to get there.  The game can fork the timeline once for each
character, and then resync on the main timeline, which will wait until all
the forked timelines finish before continuing.

The scenes module is originally based on the Scenario standalone cutscene
engine for Sphere v1, updated to take advantage of Sphere v2 features and to
integrate more seamlessly with other miniRT components.

    const scenes = require('scenes');

A scene consists of a chain of scenelet invocations, with optional forks and
resync points.  For example, supposing the scenelets used have been properly
defined, the scene below would cause the screen to fade out simultaneously and
the person `scott` to walk offscreen, and finally change the background music
only when both are complete:

    var myScene = new scenes.Scene()
        .fork()  // fork the timeline
            .fadeTo(new Color(0, 0, 0, 255), 2.0)  // 2 sec. fade
        .end()
        .walkOffscreen("scott")
        .resync()  // resync point - await completion of forks
        .changeBGM('maggieIsHungry')

This scene can be played back at any time by calling `myScene.run()`.  miniRT's
scene engine uses the threads module and by default, scenes are nonblocking.
See the documentation for `Scene#run()` below to find out how to play a scene
in blocking mode.

scenes.defScenelet(name, def);

    Registers a new scenelet with miniRT.  `name` is the name of the scenelet
    and should be a valid JavaScript identifier (although this is not enforced).
    `def` is an object defining the scenelet, and should include the following
    function properties:

        def.start(scene, ...)

            Required.  Called once when the scenelet begins execution.  .start()
            should initialize any execution state for the scenelet.  For one-off
            operations which can be completed entirely in the start function,
            .start() may return false.  Otherwise, it should return true to kick
            off a scenelet thread.

            .start() receives all arguments provided when the scenelet was added
            to the scene.

        def.update(scene)

            Required.  The scenelet's update function.  As with threads, this
            is called once per game frame and should return true to continue
            scenelet execution or false to finish.

        def.render(scene)

            Optional.  .render() is called once per render frame to render
            anything related to the scenelet.  A dialogue scenelet might render
            a textbox, for example.  Render order is determined by the order in
            which scenelets were started.

        def.getInput(scene)

            Optional.  Called once per game frame for the topmost scenelet to
            accept player input for that scenelet.  Only scenelets implementing
            a .getInput() callback are considered for topmost status.

    Each callback receives a reference to the scene object which invoked it as
    its first argument, and its `this` binding is set to a unique object it can
    use to manage execution state for that invocation only.

new scenes.Scene();

    Constructs a new scene definition.  The scene starts with no scenelets and
    will do nothing when run.  Calling any method other than .run() on the scene
    will add scenelets, and this is how you build a scene.

Scene#isRunning();

    true if scene execution is in progress, false if not.

Scene#doIf(fn);

    `fn` should be a function.  Any scenelets between the doIf() and its
    corresponding end() will be executed only if the function returns true.
    This is like to an `if` statement in JavaScript.

Scene#doWhile(fn);

    `fn` should be a function.  Any scenelets between the doWhile() and its
    corresponding end() will be executed in a loop as long as the function
    keeps returning true.  This is like to a `while` statement in JavaScript.

Scene#end();

    A metascenelet which closes the open context.  Currently, metascenelets
    which open a context and therefore require an end() marker are:

        doIf()
        doWhile()
        fork()

Scene#fork();

    A metascenelet which forks the timeline.  This opens a new timeline to which
    all subsequent scenelets are added until an end() metascenelet is
    encountered.  Forked timelines run in parallel with the timeline that
    spawned them.

Scene#restart();

    Restarts a scene from the beginning, regardless of whether or not it was
    running at the time restart() is called.

Scene#resync();

    A metascenelet which adds a resync point to the open timeline.  Timelines
    may be forked to run operations in parallel, but it is sometimes necessary
    to wait until several simultaneous operations have completed before
    continuing.  Resync points do just that, halting the timeline they are found
    on until all outstanding forks against it have completed.

    There is an implicit resync point at the end of a timeline.  In practice,
    this means that a scene will not complete until all of its timelines have
    completed.

Scene#run([blocking]);

    Plays back this scene.  `blocking` is an optional boolean argument
    specifying whether to wait for the scene to finish before returning.  If not
    provided, the default is false.

Scene#stop();

    Stops scene execution immediately.  This works like the Stop button on a CD
    player: The next time the scene is run, it will start from the beginning.


`struct` Module
---------------

The struct module allows you to read from structured binary files like those
used for Sphere game assets (maps, tilesets, etc.) based on a simple JSON
schema.

    const struct = require('struct');

new struct.DataReader(stream, schema);

    Creates a DataReader object which can be used to read binary data from
    a stream.  `stream` is an object with a read() method taking a byte count
    and returning an ArrayBuffer, such as a FileStream or Socket.

DataReader#readFloat32([littleEndian]);
DataReader#readFloat64([littleEndian]);

    Reads an IEEE floating point value from the associated stream.  If
    `littleEndian` is true, reads in little-endian mode.  Otherwise, reads in
    big-endian mode.

DataReader#readInt8();
DataReader#readInt16([littleEndian]);
DataReader#readInt32([littleEndian]);
DataReader#readUint8();
DataReader#readUint16([littleEndian]);
DataReader#readUint32([littleEndian]);

    Reads an integer value from the associated stream.  If `littleEndian` is
    true, reads in little-endian mode.  Otherwise, reads in big-endian mode.

    Note: "readUint" variants read unsigned values.  "readInt" variants read
    signed ("two's complement") values.

DataReader#readString(length);

    Reads a UTF-8 string from the associated stream.  `length` specifies how
    many bytes to read.

DataReader#readString8();
DataReader#readString16([littleEndian]);
DataReader#readString32([littleEndian]);

    Reads a UTF-8 length-prefixed string from the associated stream, where the
    length in bytes is stored as an unsigned integer.  If `littleEndian` is
    true, reads in little-endian mode.  Otherwise, reads in big-endian mode.

DataReader#readStruct(schema);

    Reads an object from the associated stream, based on `schema`.  The schema
    is an array of field descriptors describing the layout of the data; for
    example, the following will read the 256-byte header from a Sphere v1
    format map file:

        readerObj.readStruct([
            { id: 'signature', type: 'fstring', size: 4, regex: "\\.rmp" },
            { id: 'version', type: 'uintLE', size: 2 },
            { id: 'type', type: 'uintLE', size: 1 },
            { id: 'numLayers', type: 'uintLE', size: 1 },
            { type: 'reserved', size: 1 },  // reserved
            { id: 'numEntities', type: 'uintLE', size: 2 },
            { id: 'startX', type: 'uintLE', size: 2 },
            { id: 'startY', type: 'uintLE', size: 2 },
            { id: 'startLayer', type: 'uintLE', size: 1 },
            { id: 'startDir', type: 'uintLE', size: 1 },
            { id: 'numStrings', type: 'uintLE', size: 2 },
            { id: 'numZones', type: 'uintLE', size: 2 },
            { id: 'repeating', type: 'bool' },
            { type: 'reserved', size: 234 },  // reserved
        ]);

    For many binary file formats, this system is powerful enough for an entire
    file to be described using a single, sometimes multi-level, schema.  More
    complex formats usually require multiple .readStruct() calls using
    indepedent schemas.

new DataWriter(stream);

    Creates a DataWriter object which can be used to write binary data to a
    stream.  `stream` is an object with a write() method that takes an
    ArrayBuffer, such as a FileStream or Socket.

DataWriter#writeFloat32(value[, littleEndian]);
DataWriter#writeFloat64(value[, littleEndian]);

    Writes a floating point value to the stream.  If `littleEndian` is true,
    writes in little-endian mode.  Otherwise writes in big-endian mode.

DataWriter#writeInt8(value);
DataWriter#writeInt16(value[, littleEndian]);
DataWriter#writeInt32(value[, littleEndian]);
DataWriter#writeUint8(value);
DataWriter#writeUint16(value[, littleEndian]);
DataWriter#writeUint32(value[, littleEndian]);

    Writes an integer value to the associated stream.  If `littleEndian` is
    true, writes in little-endian mode.  Otherwise writes in big-endian mode.

    Note: "writeUint" variants write unsigned values.  "writeInt" variants
          write signed ("two's complement") values.

DataWriter#writeString(value);

    Writes a UTF-8 string to the associated stream.

DataWriter#writeString8(value);
DataWriter#writeString16(value[, littleEndian]);
DataWriter#writeString32(value[, littleEndian]);

    Writes a UTF-8 length-prefixed string to the associated stream, where the
    length is stored as an unsigned integer.  If `littleEndian` is true, writes
    in little-endian mode.  Otherwise, writes in big-endian mode.


`term` Module
-------------

The term module allows you to add a text-based debug console to your game.
miniRT provides a full command parser, so all your game is responsible for is
providing the names and implementations of supported terminal commands.

During gameplay, if the game allows it, the console may be shown and hidden
using the tilde key (`~`).

    const term = require('term');

term.visible [read/write]

    Gets or sets whether the console is visible to the player.

term.define(objectName, thisObj, commands);

    Registers an object and a set of commands with the console.  `commands` is
    an object providing the names and implementations of the commands being
    added, which will be associated with the name specified by `objectName`.
    Each property of `commands` has as its key the command name, and a function
    as its value, which will be called when the command is invoked.  `thisObj`
    specifies a `this` binding to use when calling a command function.

    As this API is complex and difficult to explain, an example might help
    illuminate things.  A sample term.define() call might look something like
    this:

        term.define('sound', null, {
            'play': function(filename) {
                if (fs.exists(filename)) {
					new Sound(filename).play(Mixer.Default);
				}
            }
        });

    The player could then type `sound play sounds/munch.wav` into the console
    to play that sound (assuming it exists).  Note that if an error is thrown
    while processing a command, the console will not catch it.  Games should
    perform some form of error checking in their command functions to prevent
    the player from destabilizing the game.

term.print(text[, text2[, ...]]);

    Prints a line of text to the console.  Passing more than one value will
    cause the strings to be separated with chevrons (`>>`).

term.undefine(objectName);

    Unregisters all commands previously registered under `objectName`.  See
    `term.define()` for more information.  Note: It is not currently
    possible to unregister individual commands.


`threads` Module
----------------

This is an easy-to-use cooperative threading engine.  In Sphere v1, games could
define an update and render script, which would called each frame.  In miniRT,
multiple threads can be created, each with its own update and render function.
This allows many actions to run simultaneously.  For example, you might have a
thread to run the in-game clock and another to manage animations.  An
active-time battle engine might even use several threads to manage each of the
units on the battlefield.

    const threads = require('threads');

threads.create(def[, priority]);

    Creates a new thread and returns its thread ID (an integer).  `def` should
    be an object with the following properties:

        def.update()

            The thread's update function.  This is called once per game frame to
            update any state maintained by the thread.  The update function
            should return true to keep the thread going.  If it ever returns
            false, the thread will terminate.

        def.render()

            Optional.  The thread's render function.  This is called once per
            render frame to perform any rendering related to the thread.  For
            example, a thread managing a battle unit could render its sprite.
            Render order of threads is determined by `priority`, with higher
            priority threads being rendered later (closer to the screen).

        def.getInput()

            Optional.  Called once per frame to process player input for the
            thread.  In the current version of miniRT (2.0), getInput() and
            update() calls will always match 1:1.  Future versions may change
            this however, for example by implementing an input stack or
            Z-ordering of some form.

    Each of the above functions is called with its `this` binding set to `def`.
    This can be used to implement an "entity": a full object implementing the
    above functions which manages its own thread.

threads.isRunning(tid);

    true if a thread with thread ID `tid` is running.  miniRT never recycles
    thread IDs, so this can be counted on to return false if given the tid of a
    thread which has terminated.

threads.join(tid);

    Blocks the caller and awaits termination of the thread with thread ID `tid`.
    Any running threads (and the map engine, if it's in use) will continue to
    run.  If called during a thread update, the calling thread will be blocked
    from updating or accepting input until the join is satisfied.

    Note that due to limitations inherent to JavaScript's single-threaded
    architecture, join is implemented recursively and can only be satisfied in
    a last-in-first-out manner.  So if two threads are being awaited and the
    first one terminates, the corresponding join cannot be satisfied until the
    second thread also terminates.

threads.kill(tid);

    Forcibly terminates the thread with thread ID `tid`.  If the thread ID is
    invalid or has already terminated, nothing happens.

threads.self();

    When called from an update or render function, returns the thread ID of the
    active thread.  Otherwise, returns 0.


`xml` Module
------------

Parses XML-formatted data and builds a document object model (DOM) from it.
This module is based on the MIT-licensed "sax js" parser.  The API is simple
but should cover most use cases for game development.

    const xml = require('xml');

xml.load(fileName);

    Loads XML from a file and returns a DOM built from it.  This function will
    throw if an error occurs during parsing, for example due to invalid or
    malformed XML.

    The DOM generated by this function is defined as follows:

        1. The DOM object has a property, `nodes`, which is an array of node
           objects.  Its `type` is set to "root".
        2. A node's `type` may be either "tag", "text", or "comment".
        3. A "tag" node represents an XML element and has its own `nodes`
           property, whose entries follow Rule 2 above.
        4. "text" and "comment" nodes are leaves.  They do not have a `nodes`
           property; instead they have a `text` string property with their
           content.

xml.parse(text);

    Parses XML text provided to the function and returns a DOM built from it.
    Use this when you've already retrieved XML text and have it stored as a
    string.

    Note: The return value and throw semantics are identical to xml.load().
