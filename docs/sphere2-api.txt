Sphere v2 API Reference
=======================

As a Sphere-compatible engine, minisphere implements nearly the entire
Sphere v1 API.  However, the v1 API is quite dated and, as of minisphere 4.0,
has been deprecated.  It is not documented here at all; while games using the
legacy functions will continue to run, new code should be written against the
modern Sphere v2 API, documented here.

To ease migration of existing Sphere v1 codebases to Sphere v2, legacy and
modern API calls may be freely intermingled within the same codebase, and this
is true even when the engine is running in compatibility mode.


JSON Game Manifest (`game.json`)
--------------------------------

To take full advantage of the Sphere v2 platform, a game package must include a
file named `game.json` in its root directory.  This file holds metadata such as
the title and author, as well as some control information which affects how the
engine runs the game.

Here's a sample manifest:

    {
        "version": 2,
        "name": "Spectacles: Bruce's Story",
        "author": "Fat Cerberus",
        "summary": "Follow Scott Starcross in his quest to stop the Primus.",
        "resolution": "320x240",
        "main": "main.js"
    }

JSON fields defined by the Sphere v2 specification are documented below.
Because the manifest format is JSON, as many additional fields may be added as
needed, and their values accessed from JavaScript through `system.game`.

"version" [default: 2]

    The Sphere standards version the game was developed against.  If this is 2,
    the game runs in Sphere v2 mode.  In Sphere v2 mode, the main script is
    loaded as a CommonJS module, which enables use of relative paths in
    require() calls (see below), as well as ensuring variable and function
    declarations remain local to the module.

    If this is 1, the game runs in Sphere v1 compatibility mode.  In this mode,
    the main module is executed as normal program code, and minisphere calls
    the global game() function--if one is provided--to begin game execution.

    Note: Regardless of the version specified, both Sphere v1 and v2 APIs will
          be available for use by game code.  The version in the manifest
          currently only affects the way the main module is run.  This may
          change in the future, however.

"author" [default: none]

    The name of the person or company who developed the game.

"main" [required]

    The SphereFS path of the main JavaScript module (see below for more on
    SphereFS).  This is the script minisphere will run when the game is
    started.  If no "main" field is present, the game will not start.

"name" [default: "Untitled"]

    The title of the game.  This field must be present; if it is not, the game
    will not start.

"resolution" [required]

    The default screen resolution of the game, expressed as a string of the
    form "WxH", specifying the number of pixels across and down.  For example,
    720p resolution would be expressed as "1280x720".

    Note: The resolution can be changed at runtime by calling screen.resize().

"summary" [default: none]

    A short summary of the game.  While there is no imposed length limit, it
    is recommended to keep this short (150 characters or less) with no line
    breaks.



SphereFS File System
--------------------

Sphere uses the SphereFS standard to interpret file paths.  Under SphereFS,
when a relative path is used in an API call, it will be resolved relative to
the root of the game package (where `game.json` is located).  To load files
from a different location, you can use one of the SphereFS prefixes:

    @/: The root of the game's sandboxed file system.  Usually redundant, but
        can be useful to qualify filenames in situations where a bare SphereFS
        filename is ambiguous, for example in a require() call.
    ~/: The current user's save data directory, guaranteed to be writable.  This
        is generally used to store save data and such where the user can easily
        access it.
    #/: The engine's system directory.  This contains assets included with the
        engine.  In most cases this directory is read-only.  Games should NOT
        try to write anything here as doing so can damage the host minisphere
        installation.

As an example, the following will open the file `EatyPig.bin` from the user's
save data directory for reading in binary mode:

    var file = FS.open("~/EatyPig.bin", "rb");

Absolute paths are NOT allowed, and any attempt to circumvent the sandbox, e.g.
"@/../maggie.fat", will be met with a sandbox violation error.


CommonJS API
------------

Sphere uses the CommonJS system for dependency management.  With CommonJS, each
script is run as a function, which isolates modules from one another and
enables more granular control of exports.  In addition, because the code
importing a module decides where to store its exports (if at all), naming
conflicts between modules are avoided entirely.

require(module_id);

    Loads a CommonJS module and returns its export table.  `module_id` is an
    abstract path (a string) identifying the module to load, with the same
    semantics as in, e.g. Node.js.  If the module cannot be found, an error will
    be thrown.  The engine will look for modules in the following locations:

        @/lib/
        #/modules/

    If require() is provided with a module ID beginning with either `./` or
    `../`, this indicates a path relative to the location of the calling
    module.


Low-Level System API
--------------------

The `system` global variable is provided to allow games to communicate with the
underlying Sphere platform.  The `system` object's properties provide access to
the engine's name and version number as well as the API level supported, and
there are also several methods for managing engine execution.

system.name [read-only]

    The name of the engine.  In our case, "minisphere".

system.version [read-only]

    The version number of the engine; e.g. "X.X.X".

system.apiVersion [read-only]
system.apiLevel [read-only]

    The API version and level supported by the engine, respectively.  The API
    version indicates which version of the Sphere API is supported (currently
    v2), while the API level reflects the level of functionality within a
    version.  When new methods or object properties are added to the core API
    without breaking compatibility, the API level is bumped.

    Note: Sometimes new functionality is added to the engine as an extension,
          without changing the reported API level.  See `system.extensions`
          below for how to check for supported extensions.

system.extensions [read-only]

    An array of strings specifying which extensions (optional features) are
    supported by the engine.  Code making use of extensions should check for
    the presence of the relevant string(s) in `system.extensions` and either
    show an error message or degrade gracefully if it isn't present.

    minisphere currently supports the following extensions:

        sphere_glsl_shader_support
        sphere_stateful_rng
        sphere_v1_compatible_api

system.abort(message);

    Unconditionally aborts execution and displays an error screen before
    closing the engine.  `message` will be displayed on the error screen.

    Note: system.abort() bypasses all exception handling mechanisms, including
          SSJ.  Be sure you know what you're doing before you use it.

system.exit();

    Shuts down the engine.  Be careful; this function will not return so any
    unsaved data will be lost.

system.now();

    Returns the amount of time, in seconds, since the engine started running.
    Granularity varies, but is typically less than a microsecond.

system.reset();

    Restarts the engine then reloads the currently running game.  Unsaved data
    will be lost.

system.run();

    Runs a single iteration of the Sphere event loop.  This function always
    returns true, allowing it to be used in a loop condition:

        while (!isDone && system.run()) {
            // do stuff here
        }

    Note: Be careful.  This function runs all pending ASAP jobs in the job
          queue, including settlement of outstanding promises.  This may lead
          to undesirable side effects if a promise handler modifies a global
          variable, for example.

system.sleep(time);

    Suspends all JavaScript execution for `time` seconds.  The engine will
    "spin down" during this time and relinquish its CPU cycles to other
    applications.


Dispatch API
------------

The Dispatch API is used to set up asynchronous function calls which are later
performed from a designated part of the Sphere event loop.  This is like an
advanced version of Sphere v1 update and render scripts, but better integrated
and available throughout the engine.

Dispatch.now(fn);

    Sets up a one-time job to call `fn` from the event loop as soon as
    possible.  This function is shorthand for `Dispatch.later(0.0, fn)` and is
    useful for performing operations that need to be done from the event loop
    with minimal delay, such as promise resolution.

    Returns a JobToken for use with Dispatch.cancel().

Dispatch.later(timeout, fn);

    Sets up a one-time job to call `fn` from the event loop at some point in
    the future.  `timeout` is in seconds and may be fractional.

    Returns a JobToken for use with Dispatch.cancel().

Dispatch.onRender(fn[, priority]);
Dispatch.onUpdate(fn[, priority]);

    Sets up a recurring job to call `fn` from a given part of the event loop.
    For example, `onRender()` jobs are called before the backbuffer is flipped,
    and `onUpdate()` jobs are called at the start of a frame.

    `priority` affects the order of calls when there is more than one job.
    Jobs are performed in ascending priority order, which ensures an intuitive
    rendering order.  If no priority is given, it defaults to 0.0.  Priority
    can be negative, and fractional priorities are honored: 8.12 is considered
    a higher priority than 8, for example.

    Returns a JobToken for use with Dispatch.cancel().

    Note: onUpdate jobs are processed at the beginning of a frame, while
          onRender jobs are processed at the end, just before the backbuffer is
          flipped.  This ensures that:

          1) Local game loops always have access to up-to-date game state for
             the current frame.
          2) Objects drawn by an asynchronous render job can't be obscured by
			 those rendered synchronously.

Dispatch.cancel(token);

    Cancels the job associated with the JobToken `token`.  Note that for
    one-time jobs, cancellation has no effect if the job has already been
    processed.


Random Number Generator API
---------------------------

Games often have need of a good psuedorandom number generator, particularly in
the case of RPGs.  JavaScript provides a basic generator in the form of
Math.random().  Sphere v2 takes it a step further with the powerful `RNG`
object.

minisphere uses the xoroshiro128+ algorithm to generate high-quality random
numbers and allows manually seeding the generator, as well as saving and
restoring the exact state of the generator at any time.  RNG state is often
saved along with other save data as a way to deter save scumming.

RNG.fromSeed(seed);

    Constructs a new random number generator seeded using the specified value.
    The specific sequence of numbers generated is entirely defined by the seed:
    Two generators running in parallel, initialized with the same seed, will
    always produce the same sequence.

    `seed` is a number greater than zero.  If the seed is fractional, only the
    integer part is used; everything after the decimal point is ignored.

RNG.fromState(state);

    Constructs a new random number generator which starts in the specified
    state.  See RNG#state for more information.

new RNG();

    Constructs a new random number generator seeded from the current system
    time.

RNG#state [read/write]

    Gets or sets the current state of this generator.  State is encoded as
    a 32-digit hexadecimal string which makes it easy to save and restore.

    When setting `RNG#state`, the string given must be exactly 32 characters
    and consist only of hexadecimal digits (0-9, A-F), otherwise a TypeError
    will be thrown.

RNG#next();

    Gets the next random number in the sequence.  Value returned is in the
    range [0-1).


Keyboard Routines
-----------------

What would a game be without the ability for the player to control it?  This
set of functions allows your game to accept input via the keyboard, the most
common input method for a PC game.

Key [enumeration]

    Specifies a keyboard key.  Can be one of the following:

        Key.Alt
        Key.AltGr
        Key.Apostrophe
        Key.Backslash
        Key.Backspace
        Key.CapsLock
        Key.CloseBrace
        Key.Comma
        Key.Delete
        Key.Down
        Key.End
        Key.Enter
        Key.Equals
        Key.Escape
        Key.F1
        Key.F2
        Key.F3
        Key.F4
        Key.F5
        Key.F6
        Key.F7
        Key.F8
        Key.F9
        Key.F10
        Key.F11
        Key.F12
        Key.Home
        Key.Hyphen
        Key.Insert
        Key.LCtrl
        Key.LShift
        Key.Left
        Key.NumLock
        Key.OpenBrace
        Key.PageDown
        Key.PageUp
        Key.Period
        Key.RCtrl
        Key.RShift
        Key.Right
        Key.ScrollLock
        Key.Semicolon
        Key.Slash
        Key.Space
        Key.Tab
        Key.Tilde
        Key.Up
        Key.A
        Key.B
        Key.C
        Key.D
        Key.E
        Key.F
        Key.G
        Key.H
        Key.I
        Key.J
        Key.K
        Key.L
        Key.M
        Key.N
        Key.O
        Key.P
        Key.Q
        Key.R
        Key.S
        Key.T
        Key.U
        Key.V
        Key.W
        Key.X
        Key.Y
        Key.Z
        Key.D1
        Key.D2
        Key.D3
        Key.D4
        Key.D5
        Key.D6
        Key.D7
        Key.D8
        Key.D9
        Key.D0
        Key.NumPad1
        Key.NumPad2
        Key.NumPad3
        Key.NumPad4
        Key.NumPad5
        Key.NumPad6
        Key.NumPad7
        Key.NumPad8
        Key.NumPad9
        Key.NumPad0
        Key.NumPadEnter
        Key.Add
        Key.Decimal
        Key.Divide
        Key.Multiply
        Key.Subtract

    Note: Keys D0-D9 refer to the row of numbers above the letter keys and
    below the function keys, while NumPad0-NumPad9 refer to the numbers on the
    numeric keypad.

Keyboard.Default [read-only]

    Gets the default keyboard device.  minisphere currently only supports a
    single keyboard.

Keyboard#capsLock [read-only]
Keyboard#numLock [read-only]
Keyboard#scrollLock [read-only]

    Gets the state of the corresponding lock key.  true if the lock is on,
    false if not.

Keyboard#clearQueue();

    Removes all keys from the keyboard queue.  If another key is not pressed
    in the interim, the next getKey() will return null.

Keyboard#getChar(key, shifted);

    Gets the character(s) that would be generated if a specified key is pressed
    on this keyboard.  For example, Key.A becomes "a" (or "A" if shifted).
    `shifted` specifies whether to assume the Shift key is pressed.

    An empty string is returned if the specified key is not associated with a
    character (a modifier key, for example).

Keyboard#getKey();

    Gets the next key in the keyboard queue, or null if the queue is empty.

Keyboard#isPressed(key);

    Returns true if the user is currently pressing the specified key.  `key`
    should be a member of the Key enumeration.


Joystick Routines
-----------------

Joystick.Null [read-only]

    Gets the null joystick.  When polled, a null joystick returns neutral
    values for all inputs.  Joystick.Null can be used in place of a real
    Joystick object to simplify input code.

Joystick.getDevices();

    Gets an array of Joystick objects, one for each connected gamepad or
    joystick.

Joystick#name [read-only]

    Gets the name of the device, as reported by the Allegro backend.  Xbox
    controllers are reported as "XInput Joystick <n>"

Joystick#numAxes [read-only]

    Gets the number of analog axes supported by the device.

Joystick#numButtons [read-only]

    Gets the number of buttons supported by the device.

Joystick#getPosition(axisID);

    Polls the device and gets the current position along the specified analog
    axis.  To get the number of axes supported by a device, use the `numAxes`
    property.

    Note: Axes are numbered sequentially, starting from 0.  Which physical axis
          is associated with any given axis ID will vary from device to device.
          For gamepads with analog sticks, though, it's generally a safe bet
          that the primary analog stick will be mapped to the first two axes.

Joystick#isPressed(buttonID);

    Polls the device and returns true if the specified button is currently
    depressed.  To get the number of buttons supported by a device, use the
    `numButtons` property.

    Note: Buttons are numbered sequentially, starting from 0.  As with axes,
          which physical button is associated with any given button ID will
          vary from device to device.


Mouse Routines
--------------

These methods allow access to the mouse, another common input method for games.
As with the Keyboard API, the Mouse API provides access to an event queue which
accumulates mouse clicks and other events until the game is ready to process
them.

MouseKey [enumeration]

    Specifies a mouse click or other event (such as a wheel movement).  Can
    be one of the following:

        MouseKey.Left
        MouseKey.Middle
        MouseKey.Right
        MouseKey.WheelUp
        MouseKey.WheelDown

Mouse.Default [read-only]

    Gets the default mouse device.  minisphere currently only supports a single
    mouse.

Mouse#x [read-only]
Mouse#y [read-only]

    Gets the immediate X and Y position of the mouse cursor relative to the
    game's rendering area.

Mouse#clearQueue();

    Removes all events from this mouse's event queue.  If another event is not
    received in the interim, the next getEvent() will return null.

Mouse#getEvent();

    Gets the next event in this mouse's event queue.  `null` is returned if the
    queue is empty.

    The object returned has the following properties:

        event.key

            A MouseKey value representing the type of the click or other event.
            For example, a left mouse click is represented as MouseKey.Left.

        event.x
        event.y

            The X and Y position of the mouse cursor relative to the rendering
            area at the time the event was received.

Mouse#isPressed(key);

    Gets whether the specified mouse button is currently pressed.  `key` is one
    of the MouseKey constants listed above.

    Note: This function always returns false for virtual keys such as WheelUp
          and WheelDown.


Graphics API
------------

Unlike in Sphere 1.x, in second-generation games all rendering, both 2D and 3D,
is done through the Galileo API.  Galileo represents a more modern, polygon-
based approach to graphics.  Scenes are built from groups of Shape object which
represent graphics primitives (triangle strips, fans, etc.).

screen [global variable]

    A Surface object (see below) representing the primary render target--
    specifically, the backbuffer.  Anything drawn to this surface will become
    visible to the player when calling `screen.flip()`.

screen.frameRate [read/write]

    Gets or sets the framerate used to regulate `screen.flip()` (see below).
    Set this to 0 for unthrottled rendering.

screen.width [read-only]
screen.height [read-only]

    Gets the width and height of the screen resolution.

screen.clipTo(x, y, width, height);

    Changes the clipping rectangle.  Anything drawn outside of the clipping
    rectangle won't be rendered.  The effect lasts until the next backbuffer
    flip.

screen.flip();

    Performs event loop processing and flips the backbuffer to the screen.
    `screen.frameRate` determines the maximum number of flips to perform per
    second; this makes it easier to regulate your game's update rate.

    After a flip, the backbuffer is cleared to black.  If you need to perform a
    long operation without disturbing the contents of the screen, you should
    use system.run() instead of screen.flip() to run the event loop.

    Note: Calling screen.flip() resets the clipping rectangle.  See the entry
          for screen.clipTo() above.

screen.resize(width, height);

    Changes the game's resolution.  The change is not persistent and lasts only
    until the engine is closed.

Color.Red [read-only]
Color.Green [read-only]
Color.Blue [read-only]
Color.Transparent [read-only]
etc...

    Gets a copy of a predefined color.  The entire X11 color set is provided,
    giving you access to such colors as `DodgerBlue` and `Chartreuse` in
    addition to the standard red, green, blue, yellow, etc.

    Each of these is an accessor which returns a new Color object every time
    it is invoked.  This ensures that code like what's shown below won't cause
    undesirable side effects:

        var color = Color.Red;
        color.blue = 255;  // we needed magenta instead

    The downside to this is that e.g. `Color.Red === Color.Red` evaluates to
    false, but this is rarely an issue in practice.

Color.mix(color1, color2[, w1, w2]);

    Calculates a weighted average of two colors.  `w1` and `w2` are optional
    and specify the relative weights of `color1` and `color2` respectively.  If
    the weights are omitted, the mix is 50/50.

Color.of(name);

    Returns a Color object from `name`, which can either be the name of a
    predefined X11 color without spaces (e.g. "chartreuse"), or an ARGB
    signature such as "#800000FF".  If `name` cannot be resolved to a color,
    throws a TypeError.

new Color(red, green, blue[, alpha]);

    Constructs a new Color object.  Color objects are used to specify the color
    of elements such as vertices and primitives.  Color components should be in
    the range [0.0-1.0] and out-of-range values will be silently clamped.
    `alpha` specifies opacity and defaults to 1.0 if not provided.

Color#r [read/write]
Color#g [read/write]
Color#b [read/write]
Color#a [read/write]

    Gets or sets the individual components of the color.  Values outside the
    range of [0-1] are accepted, but the engine will automatically clamp them
    during rendering.

Color#name [read-only]

    Gets the name of the Color according to its component values such that
    Color.of(color.name) will give back a Color with the same values.  Useful
    for saving and reading back colors from save files.

Color#clone();

    Returns a copy of this Color object.  Changes to the clone will not affect
    the original object.

Color#fade(alpha);

    Scales this color's alpha channel by `alpha`, between 0.0 and 1.0, and
    returns the result.  The red, green, and blue components are not modified.
    This is useful when you need to make a predefined color translucent, for
    instance:

        var translucentBlue = Color.Blue.fade(0.5);

Font.Default [read-only]

    Gets the default engine font.  This is the font used for the FPS counter
    and system messages.

new Font(filename);

    Constructs a Font object from a font file.  Currently only the Sphere RFN
    font format is supported.

Font#fileName [read-only]

    Gets the full canonicalized SphereFS filename of the file used to construct
    this Font object.

Font#height [read-only]

    Gets the line height, in pixels, for text rendered using this font.

Font#drawText(surface, x, y, text[, color[, wrap_width]]);

    Renders `text` to the specified surface at (x,y).  `color` defaults to
    Color.White if not provided, and `wrap_width` specifies the width in which
    to constrain the text.  If `wrap_width` is not provided, no wrapping is
    performed.

Font#getTextSize(text, wrap_width);

    Gets the size, in pixels, of `text` if it were rendered by Font:drawText()
    with the specified wrap width.  Return value is an object with `width` and
    `height` properties.

Font#wordWrap(text, wrap_width);

    Wraps `text` as if it were drawn with Font#drawText() using the specified
    wrap width.  Returns an array of strings, representing the lines in the
    wrapped text.

    When drawing large amounts of word-wrapped text every frame, for example in
    a text box, this function should be used to pre-wrap the text since
    performing wrapping calculations every frame can get expensive.

new Image(filename);

    Constructs a new Image object from an image file.  An Image cannot be
    rendered directly and must instead be used as a texture for a Shape object.

    Note that Images are read-only.  If you need a writable image, you should
    use a Surface object instead.

new Image(width, height, pixels);

    Constructs a new Image from a pixel buffer.  `width` and `height` specify
    the size of the image, and `pixels` is an ArrayBuffer containing the RGBA
    pixel data to use to initialize the image.  The pixel data should not be
    padded (i.e. stride is equal to width).

    An error is thrown if the ArrayBuffer doesn't contain enough pixel data to
    describe the entire image.

Image#fileName [read-only]

    Gets the full canonicalized SphereFS filename of the file used to construct
    this Image object.  For synthesized images, returns null.

Image#width [read-only]
Image#height [read-only]

    Gets the width or height of the image, in pixels.

Shader.Default [read-only]

    Gets the default Galileo shader program.  This is a very barebones shader
    which uses screen coordinates for vertices and performs only basic texture
    mapping.

new Shader(options);

    Constructs a Shader from a set of shader sources.  `options` should be an
    object with the following properties:

        options.vertex

            The name of the file containing source code for the GLSL vertex
            shader.

        options.fragment

            The name of the file containing source code for the GLSL fragment
            shader.

    Note that HLSL (DirectX) shaders are not supported, even on Windows.

ShapeType [enumeration]

    Specifies the type of graphics primitive represented by a Shape object.
    Can be one of the following:

        ShapeType.Auto
        ShapeType.Fan
        ShapeType.Lines
        ShapeType.LineLoop
        ShapeType.LineStrip
        ShapeType.Points
        ShapeType.Triangles
        ShapeType.TriStrip

new Shape(vertices[, texture[, type]]);

    Constructs a primitive shape out of the provided array of vertices textured
    with the Image specified by `texture`.

    Each vertex can have the following properties:

        vertex.x, vertex.y

            The location of the vertex.  The final location of each vertex can
            be modified by using a transformation matrix (see Matrix above).

        vertex.u, vertex.v

            The texture coordinates of the vertex.  This is used to control
            which part of the texture will be applied to this vertex.  If u/v
            is not provided for a vertex, it will be assumed to be have its u/v
            at (0, 0).

        vertex.color

            The color of the vertex.  The vertex colors will be multiplied with
            texture pixels to determine the final color of each pixel in a
            shape.

    `type` specifies the type of primitive (see ShapeType above).  If `type` is
    ShapeType.Auto (the default), the type is determined automatically based on
    the number of vertices.

Shape#texture [read/write]

    The Image to use when texturing the shape. This can be null, in which case
    the vertex colors alone will determine the shape's appearance.

Shape#draw(surface[, transform]);

    Draws the shape.  `transform` is the Transform to use, and `surface` is the
    Surface to draw on.  If `surface` is omitted, the shape is drawn on the
    backbuffer.

new ShapeGroup(shapes[, shader]);

    Constructs a ShapeGroup out of the provided array of Shape objects.
    `shader` is the Shader to use when rendering the group.  See below for more
    information on shaders.

    When a ShapeGroup is created, its transformation matrix is set to the
    identity matrix.  If `shader` is not provided, the default shader program
    will be used (see `Shader.Default`).

ShapeGroup#shader [read/write]

    Gets or sets the Shader to use when drawing this group.

ShapeGroup#transform [read/write]

    Gets or sets the transformation matrix to use when drawing this group.

ShapeGroup#draw(surface);

    Draws the group on `surface`. Any transformations defined for the group
    (see below) are applied as if the entire group were a single primitive.

ShapeGroup#setFloat(name, value);
ShapeGroup#setInt(name, value);
ShapeGroup#setMatrix(name, transform);

    Sets the value of a GLSL uniform.  When the group is drawn, if its shader
    program contains a uniform called `name` of the proper type, the value will
    be uploaded to that uniform.  It is safe to call this even if the uniform
    turns out not to exist (in which case the call is effectively a no-op).

new Surface(width, height[, fill_color]);

    Constructs a new surface with the specified width and height, optionally
    filled with 'fill_color'.  If a fill color is not provided, the created
    surface will be filled with transparent pixels.

    Surfaces are meant to used as render targets from drawing operations.  This
    enables static elements of a scene, such as a HUD, to be rendered in
    advance, potentially improving performance.

new Surface(filename);

    Constructs a new Surface whose initial contents are taken from the
    specified image file.

Surface#width [read-only]
Surface#height [read-only]

    Gets the width and height of the surface, in pixels.

Surface#toImage();

    Creates an Image from the current contents of this Surface and returns it.
    Note that drawing to the surface afterwards will not affect the generated
    image, which is read-only.

new Transform();

    Constructs a transformation matrix.  The object represents a 4x4 matrix
    and is initialized to identity.

Transform#identity();

    Re-initializes this matrix as an identity matrix.

Transform#compose(otherMatrix);

    Composes this transform with another.  `otherMatrix` is multiplied from the
    left such that transformations are performed in the order you specify.

Transform#rotate(theta[, vx, vy, vz]);

    Applies a rotation transformation to this matrix.  `theta` is the angle of
    rotation, in radians.  (vx, vy, vz) is the vector to rotate about.  For
    example the default is (0, 0, 1) which rotates about the Z axis.

Transform#scale(sx, sy);

    Applies a scaling transformation to this matrix.  `sx` and `sy` are the
    horizontal and vertical scaling factors, respectively.

Transform#translate(tx, ty);

    Applies a translation transformation to this matrix.  `tx` and `ty` are the
    horizontal and vertical translations, respectively.


Audio API
---------

Playing sounds and music are both handled in minisphere by Audialis, the
evolution of Sphere 1.x's audio subsystem.  Audialis allows you to create mixers
which can be used to adjust certain parameters across all sounds associated with
that mixer.  This is useful for implementing global volume controls, for
example.

Mixer.Default [read-only]

    Gets the default Audialis audio mixer.  The default mixer outputs 44.1 kHz
    16-bit stereo sound, i.e. CD quality.

new Mixer(frequency, bits[, channels]);

    Constructs a new Mixer object.  Any sounds played through the mixer will use
    the format specified by the parameters above.  `frequency` is the sample
    rate, `bits` specifies the bit depth (allowed values are 8, 16 and 24), and
    `channels` is the number of channels, ranging [1-7].  Channel counts of 5 or
    higher imply an additional LFE channel (i.e. 5.1, 6.1, 7.1).

    Do note that this creates a _hardware_ mixer.  If the requested format is
    not supported by the system, an error will be thrown ("unable to create
    hardware voice").

Mixer#volume [read/write]

    Gets or sets the output volume of the mixer.  This will affect the volume
    of any sounds played through the mixer.

new Sound(filename);

    Constructs a Sound object from the specified audio file.  Supported sound
    formats are Ogg Vorbis (.ogg), WAV, MOD, S3M, IT, and FLAC.  Note that
    unlike in Sphere 1.x, mp3 and MIDI formats are not supported.

Sound#fileName [read-only]

    Gets the full canonicalized SphereFS filename of the file used to construct
    this Sound object.

Sound#length [read-only]

    Gets the length of the sound in microseconds.

Sound#pan [read/write]

    Gets or sets the current pan (balance). 0.0 is dead center, -1.0 is full
    left, and 1.0 is full right.

Sound#playing [read-only]

    true if the sound is currently playing, false otherwise.

Sound#position [read/write]

    Gets or sets the playback position within the sound, in seconds.

Sound#repeat [read/write]

    Gets or sets whether the sound will automatically repeat when it reaches
    the end.

Sound#speed [read/write]

    Gets the current playback speed of the sound.  1.0 is normal, 2.0 is double
    speed, etc.  Note that changing the playback speed affects the pitch as
    well.

Sound#volume [read/write]

    Gets or sets the current volume of the sound.  0.0 is silent, 1.0 is full
    volume.  Higher values are allowed, but may introduce distortion due to
    clipping.

Sound#pause();

    Pauses the sound.  If it is already paused, this has no effect.

Sound#play([mixer]);

    Begins or resumes sound playback.  When called with no `mixer` argument,
    Sound#play() will resume playback for a paused sound.  Otherwise, the sound
    is started from the beginning on the specified mixer.

Sound#stop();

    Stops the sound.  Playback position will be reset to the beginning (0.0s),
    even if the sound was not playing.

new SoundStream([frequency[, bits[, channels]]]);

    Constructs a sound stream, which plays arbitrary sound data provided by the
    game at runtime.  This may be used, for example, to generate sound
    procedurally or add support for an unsupported audio format in script.
    `frequency` specifies the stream's sample rate and 'channels' the number of
    audio channels, ranging [1-7].  Channel counts of 5 and higher imply an
    additional LFE (subwoofer) channel.

    The default stream format is 8-bit 22050Hz with 1 channel.

SoundStream#bufferSize [read-only]

    Gets the total number of samples in the stream's buffer.

SoundStream#buffer(data);

    Writes audio data to the stream buffer.  `data` is an ArrayBuffer,
    TypedArray or DataView containing the data to write.  While a stream is
    playing, audio data should be fed into it continuously to prevent skipping.

SoundStream#pause();

    Pauses playback of the stream.  Has no effect if the stream is already
    paused.

SoundStream#play([mixer]);

    Starts the stream playing, or if no mixer is specified, resumes a paused
    stream.  Before beginning playback, it is recommended to pre-buffer a few
    seconds of audio into the stream (see SoundStream:buffer() below).  This
    will minimize the risk of a buffer underrun and subsequent skipping during
    playback.

SoundStream#stop();

    Stops playback of the stream and frees its buffer.  This should be called
    when you are done using a stream.  The stream may be reused after a stop()
    call, but you will have to feed new audio data.


File System API
---------------

minisphere provides the `FS` object to allow games to access asset and save
files, create or remove directories, and so on.

FS.exists(filename);

    Checks whether the specified file exists and returns true if it does.
    Otherwise, returns false.

FS.mkdir(dirname);

    Creates the specified directory and any of its parent directories that
    don't already exist.

FS.open(filename, mode);

    Opens the specified file and constructs a new FileStream to access it.
    `mode` is a string in the same format as that of C fopen() specifying the
    mode in which to open the file:

        r:  Open file for reading.
        r+: Open file for update (reading and writing).
        w:  Create/truncate then open file for writing.
        w+: Create/truncate then open file for update.
        a:  Open file (create if not found) with file position at end of file.
        a+: Open file for update with initial position at end of file.

    Note that calling FS.open() is the only way to get a FileStream object;
    there is no FileStream constructor.

FS.rename(srcname, destname);

    Renames the file named by `srcname` to `destname`, both of which are
    assumed to be full SphereFS paths.  This can also be used to move a file
    between directories; if so, the destination directory must already exist.

FS.resolve(path);

    Resolves a path (which may contain relative components) to its canonical
    SphereFS representation.  This can be useful when data is associated with
    individual assets, such as map files, and you need to ensure the same data
    is pulled for a given file regardless of the path used to access it.

    Note that the resource referred to by the path doesn't need to exist.  As
    with other FS methods, FS.resolve() will throw an error if an absolute path
    is passed in.

FS.rmdir(dirname);

    Deletes the specified directory.  The directory must be empty or an error
    will be thrown.

FS.unlink(filename);

    Deletes the specified file.

FileStream#fileName [read-only]

    Gets the full canonicalized SphereFS filename of the underlying file.

FileStream#position [read/write]

    Gets or sets the file position, which determines where in the file the next
    read or write will start from.  Expressed in bytes.

    Note: For files opened for writing, it is valid to seek past the end of the
    stream.  In this case the next write will be at the new position and the
    intervening space filled with NUL bytes.

FileStream#size [read-only]

    Gets the size of the underlying file, in bytes.

FileStream#close();

    Closes the stream, after which the FileStream object should not be used.
    Attempting to read or write to a stream after it is closed will throw an
    error.

FileStream#read([num_bytes]);

    Reads data from the file, up to the specified number of bytes, and returns
    it as an ArrayBuffer.  As a convenience, `num_bytes` can be omitted to read
    the entire file without affecting the file position.  The file must be
    opened for reading.

FileStream#write(data);

    Writes data to the file and advances the file pointer.  `data` should be an
    ArrayBuffer, TypedArray or DataView containing the data to be written.


Networking API
--------------

minisphere includes basic support for TCP sockets.  There are two object types:
Socket and Server.  A Server is persistent and listens for connections on a
given port, while Sockets represent individual client connections.

new Server(port[, backlog_size]);

    Constructs a new server which listens for connections on the specified
    port.  `backlog_size` specifies the size of the backlog.  If the backlog
    fills, new connections will be dropped.

Server#accept();

    If one or more connections are waiting in the backlog, removes it from the
    queue and returns a Socket object representing the connection.  Otherwise,
    returns null.  This should be called regularly to prevent the backlog from
    filling up.

Server#close();

    Shuts down the server.  Any connections in the backlog will be dropped and
    no new connections can be made until a new Server is created.

new Socket(hostname, port);

    Connects to `hostname` on `port` and constructs an Socket representing the
    connection.  The hostname can either be a named address (e.g. google.com)
    or an IP address (e.g. 127.0.0.1).  As this operation is non-blocking, a
    Socket object will be returned even if the connection can be not be made;
    you must poll Socket#connected to find out when the connection has opened.

Socket#bytesPending [read-only]

    Gets the number of bytes of data currently in the receive buffer.  Call
    Socket#read() to retrieve this data.

    Note that more data may be received between the time this is checked the
    time a read is performed.  It's recommended to poll this value from time to
    time and perform reads in order to keep the size of the receive buffer
    down.

Socket#connected [read-only]

    Gets whether the connection has been established.  As long as this is
    false, you cannot call any other methods on the socket object.  Doing so
    will cause an error to be thrown.

Socket#remoteAddress [read-only]

    Gets the IP address of the upstream end of the socket.  Throws an error if
    accessed before a connection has been established.

Socket#remotePort [read-only]

    Gets the port that the remote machine is using for the connection.
    Generally not a useful statistic, but it's there if you need it.  Throws an
    error if accessed before a connection is established.

Socket#close();

    Disconnects the socket.  Note that any given Socket object is tied to a
    specific session and so cannot be reused after it has been closed.

Socket#read(num_bytes);

    Reads up to `num_bytes` bytes from the socket and returns an ArrayBuffer
    containing the data received.  This method is non-blocking: If more bytes
    are requested than are available, only the available data will be returned.

Socket#write(data);

    Writes data to the socket, which can be read at the other end.  `data` can
    be either an ArrayBuffer, TypedArray view, or DataView.
