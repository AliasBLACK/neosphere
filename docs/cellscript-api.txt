Cellscript API Reference
========================

Cell is a scriptable build system and compiler for Sphere games. Like Sphere
itself, it uses JavaScript to control the build process.  This file documents
the public API used to write build scripts.


SphereFS File System
--------------------

Cell, like neoSphere, uses SphereFS file and directory paths.  Under SphereFS,
when a relative path is used in an API call, it is typically resolved relative
to the entrypoint (in Cell, the location of Cellscript.js).  To reference files
and directories in a different location, you can specify the root using a
SphereFS root prefix:

    @/: The root of the game package being compiled. This is where Cell will
        create `game.sgm` and so aligns with what `@/` means in game code.
    $/: The project root, i.e., the directory containing `Cellscript.js`. This
        root is read-only; Cell code cannot modify the contents of the source
        tree directly.
    ~/: When used in a Sphere game, this specifies the current user's save data
        directory.  Using this prefix in Cell will throw an error.
    #/: The Sphere system directory, which contains assets included with the
        engine.  This directory is read-only.

As an example, the following will create a FileStream to write the file
`EatyPig.bin` in the root of the game package:

    var file = new FileStream("@/eatyPig.bin", FileOp.Write);

Note that absolute paths referring directly to a file on the host file system
are disallowed, and any attempt to circumvent the sandbox by traversing upwards
from a SphereFS root, e.g. `@/../maggie.fat`, will produce a sandbox violation
error.


Sphere v2 API
-------------

To make things easier for Sphere v2 developers, Cell provides a subset of the
Sphere v2 API and standard library for use in Cellscripts.  Specifically, the
following are provided:

    - Text Encoding API (`TextEncoder`, `TextDecoder`)
    - File System API (`FS`, 'DirectoryStream', `FileStream`)
    - Random Number Generator API (`RNG`)
    - Data Compression API (`Z`)

    - Sphere Runtime modules:
        - `assert` module
        - `dataStream` module
        - `delegate` module
        - `from` module
        - `logger` module
        - `random` module
        - `test` module
        - `xml` module

Refer to `sphere2-core-api.txt` and/or `sphere2-hl-api.txt` for more
information on how to use those APIs.


Core Cellscript API
-------------------

The functions and properties below are available for use at all times, by all
Cellscripts and modules.  No `require()` or `import` statements are necessary
to use them.

Sphere.Compiler [read-only]

    A string specifying the name and version number of the compiler.  The
    version number takes the form X.Y.Z, where X is the major version, Y is the
    minor version, and Z is the patch level.

Sphere.Version [read-only]

    An integer specifying which version of the Cellscript API is supported by
    the compiler (e.g., 2).

Sphere.Game [read-only]

    An object whose properties describe the game being compiled.  JavaScript
    code cannot modify this object's properties directly; its contents always
    reflect the most recent call to `describe()`.

describe(game_description);

    Provides information (for example, title, author, API level, etc.) about
    the game being built.  Calls to this function are cumulative and the values
    are validated by Cell during the call.  If a `describe()` call fails, the
    build will be cancelled.

error(message);

    Produces an error.  Errors generated during Cellscript evaluation will
    prevent any targets from being built, while errors generated during a build
    will not (Cell tries to build as many targets as possible).  In both cases
    the build will ultimately fail and a game manifest will not be generated.

files(pattern[, recursive]);

    Constructs a target for every file matching the specified pattern.  File
    targets are unique: They have no sources, and are always considered to be
    up to date.

    `pattern` is a wildcard (e.g. "*.png") combined with an optional SphereFS
    path specifying the directory to be searched.  If 'recursive' is true,
    subdirectories are searched as well.

install(directory, sources);

    Copies all specified Targets into a given directory at build time.  To copy
    existing files, you can use a files() builder to populate `sources`. (see
    above).  `directory` is resolved relative to `@/` by default.

warn(message);

    Produces a warning.  Warnings will be reported to the user but will not
    prevent a successful build.

new Image(fileName);

    Constructs a new Image object from the image file named by `fileName`.  The
    `Image` class allows you to work with images directly at the pixel level.

    Note: Cell currently only supports loading PNG images.

Image#bitmap [non-replaceable]

    A Uint8Array containing the pixel data for the image.  The pixel format is
    always RGBA and pixels are encoded from left-to-right, top-to-bottom.  Each
    four bytes in the array represent a single pixel of the image.

Image#width [read-only]
Image#height [read-only]

    The width and height of the image, in pixels.

Image#saveAs(fileName);

    Writes the image out to a PNG file named `fileName`.  Be careful: if a file
    by the specified name already exists, it will be overwritten!

Image#slice(x, y, width, height);

    Returns a new Image object from the specified portion of this image.

Target#fileName [read-only]

    Gets the full SphereFS path of the output file represented by this Target.

Target#name [read-only]

    Gets the name of this Target.  Usually this is just the output filename
    without any path information; however, targets constructed by files() may
    include a relative path to make it possible to reconstruct the original
    directory structure elsewhere.

new Tool(buildFunc[, status_text]);

    Constructs a Tool which can be used to build custom targets.  For example,
    you might create a Tool to build minified scripts or compress files.

    For each target built by the Tool, `buildFunc` is called and provided with
    the target filename as well as an array of filenames for the sources needed
    to build it.  The function is expected to create the target file or, if
    it already exists, to update its modification date.  If it doesn't, a build
    warning or error will result.

    `buildFunc` has the signature:
        function(outFileName, inFileNames)

    `status_text` is how Cell will describe the build step, e.g. "compiling" or
    "compressing".  If the status text is omitted, "building" is the default.

Tool#stage(pathname, sources);

    Instructs Cell to build `pathname`, which can name either a file or
    directory, using this Tool.  `pathname` is resolved relative to `@/' by
    default.  Returns a Target object representing the output.

    Note: If `pathname` is a directory path, Cell will consider the target to
          be perpetually out-of-date and run the tool during every build.  If
          you don't want this, you need to specify a file so Cell can use it
          for timestamp comparisons.
