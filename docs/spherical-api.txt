Spherical API Reference
=======================

minisphere uses JavaScript for game logic.  This is the same programming
language used by the original Sphere engine, which minisphere is the successor
to.  In fact, minisphere implements most of the Sphere 1.5 API, with several
backwards-compatible enhancements.

This file documents the functions exposed by minisphere for use in game scripts.
The list may not be exhaustive, particularly in regards to legacy functions;
refer to the Sphere 1.x API reference for a full list of legacy functions (note
that a few of these may not be supported, however):

    Sphere 1.x API Reference:
    https://github.com/sphere-group/sphere/blob/master/sphere/docs/development/api.txt


game.json (Game Manifest)
-------------------------

Sphere 2.0 games must provide a file called `game.json` in the root of the game
package which holds the metadata for the game.  All values in game.json are
available to game code through `engine.game` (see below).

A basic `game.json` might look like this:

    {
        "name": "Spectacles: Bruce's Story",
        "author": "Fat Cerberus",
        "summary": "Follow Scott Starcross in his quest to stop the Primus.",
        "resolution": "320x240",
        "main": "main.js",
    }

Most of these values should be self-explanatory.  `main` is a SphereFS path
naming the game's main JavaScript module.


SphereFS File System
--------------------

minisphere follows the SphereFS standard for file paths.  When a relative path
is passed to a function or method, it will be resolved relative to the root of
the game package (where `game.json` is located).  To load files from a
different location, you can use one of the following SphereFS prefixes:

    @/: The root of the game's sandboxed file system.  Usually redundant, but
        can be useful to qualify filenames in situations where a bare SphereFS
        filename is ambiguous, for example in a require() call.
    ~/: The current user's save data directory, guaranteed to be writable.  This
        is generally used to store save data and such where the user can easily
        access it.
    #/: The engine's system directory.  This contains assets included with the
        engine.  In most cases this directory is read-only.  Games should NOT
        try to write anything here as doing so can damage the host minisphere
        installation.

As an example, the following will open the file `EatyPig.bin` from the user's
save data directory for reading in binary mode:

    var file = fs.open("~/EatyPig.bin", "rb");

Absolute paths are not allowed, and any attempt to circumvent the sandbox, e.g.
"@/../maggie.fat", will be met with an error indicating a sandbox violation.


CommonJS
--------

Second-generation Sphere engines like minisphere use CommonJS for dependency
management.  In CommonJS, each script is run as a function, which isolates
modules from one another and enables more granular control of exports.  In
addition, because the code importing a module decides where to store its
exports (if at all), naming collisions between modules are avoided entirely.

require(module_id);

    Loads a CommonJS module and returns its export table.  `module_id` is an
    abstract path (a string) identifying the module to load, with the same
    semantics as in, e.g. Node.js.  If the module cannot be found, an error will
    be thrown.  minisphere will look for modules in the following locations:

        @/lib/
        #/modules/

    If require() is provided with a module ID beginning with either `./` or
    `../`, this indicates a path relative to the location of the calling
    module.


`engine` Global Variable
------------------------

`engine` provides a way for games to communicate with the underlying Sphere
platform.  The object's properties provide access to the engine's name and
version number as well as the API level supported, and there are several
methods for controlling engine execution, for example `engine.sleep()`.

engine.name [read-only]

    The name of the engine.  In this case, "minisphere".

engine.version [read-only]

    Gets the version number of the engine, e.g. "4.0.0"

engine.apiVersion [read-only]
engine.apiLevel [read-only]

    Gets the API version and level supported by the engine, respectively.  API
    version indicates which generation of the Sphere API is supported (Gen 2,
    in our case), while API level reflects the level of functionality within a
    generation.  Whenever new API calls or object properties are added to the
    core API without breaking compatibility, the API level is bumped.

engine.extensions [read-only]

    Gets an array of Sphere API extension strings supported by the engine.
    Extensions are used to advertise support for features which are provided by
    the engine but not yet part of the core API.

engine.time [read-only]

    Gets the amount of time, in seconds, since the engine started running.  The
    granularity varies, but is typically less than a microsecond.

engine.dispatch(func);

    Queues a function to be called on the next event loop iteration, rather
    than immediately.  This is intended for use when implementing asynchronous
    systems such as promises.

engine.doEvents();

    Runs a single iteration of the engine's event loop.  Always returns true so
    that doEvents() can be used in a loop condition:

        while (!isDone && engine.doEvents()) {
            // do stuff here
        }

engine.exit();

    Shuts down the engine unconditionally.  Unsaved data will be lost.

engine.restart();

    Restarts the engine then reloads the currently running game.  Unsaved data
    will be lost.

engine.sleep(time);

    Suspends game execution for `time` seconds.  The engine will "spin down"
    during this time and relinquish its CPU cycles to other applications.  No
    JavaScript code will be executed until the timeout expires.


`random` Global Variable
------------------------

Games often have need of a good random number generator, particularly in the
case of RPGs.  JavaScript has a basic generator in the form of Math.random().
The Sphere API takes it a step further and provides the `random` object.

minisphere uses the xoroshiro128+ algorithm to generate high-quality random
values and allows manually seeding the generator, as well as saving and
restoring the state of the generator at any time, which may be used to
implement a time travel mechanic, or as a deterrent for save scumming.

random.state [read/write]

    Gets or sets the internal state of the random number generator.  The state
    is represented as a 32-digit hexidecimal string which makes it easy to save
    and restore.

    When setting `random.state`, the string given must be exactly 32 characters
    and consist only of hexidecimal digits (0-9, A-F), otherwise a TypeError
    will be thrown.

random.chance(odds);

    Takes a chance and returns true or false depending on the outcome.  `odds`
    is a value in the range [0-1] and represents a percentage: 0.75, for
    instance, will pass 75% of the time.

random.normal(mean, sigma);

    Returns a random floating point value normally distributed around `mean`
    with a standard deviation of `sigma`.  The probability distribution of this
    function is sometimes termed a "bell curve."

random.random();

    Returns a floating point value in the range [0,1).  This is the basic
    method of random number generation, and is a direct, drop-in replacement
    for Math.random().

random.range(min, max);

    Returns a random integer uniformly distributed within the range [min, max].

random.reseed(seed);

    Reseeds the random number generator; different seeds will generate
    different random sequences.  If `seed` is floating point, it will be
    truncated to an integer: a seed of 812.88, for example, is treated the same
    as 812.

random.sample(array);

    Returns a single randomly-chosen item from `array`.

random.string([length]);

    Returns a randomly-generated string consisting of alphanumeric characters.
    The generated string looks something like a YouTube video hash (e.g.
    YlHRHDrKS) and is useful for uniquely identifying things, for example to
    generate temporary filenames.  If no length is provided, the default is 10.

random.uniform(mean, variance);

    Returns a random floating point value uniformly distributed around `mean`
    with absolute maximum deviation specified by `variance`.


Keyboard Routines
-----------------

What would a game be without the ability for the player to control it?  This
set of functions allows your game to accept input via the keyboard, the most
common input method for a PC game.

Key [enumeration]

    Specifies a keyboard key.  Can be one of the following:

        Key.None
        Key.Alt
        Key.AltGr
        Key.Apostrophe
        Key.Backslash
        Key.Backspace
        Key.CapsLock
        Key.CloseBrace
        Key.Comma
        Key.Delete
        Key.Down
        Key.End
        Key.Enter
        Key.Equals
        Key.Escape
        Key.F1
        Key.F2
        Key.F3
        Key.F4
        Key.F5
        Key.F6
        Key.F7
        Key.F8
        Key.F9
        Key.F10
        Key.F11
        Key.F12
        Key.Home
        Key.Hyphen
        Key.Insert
        Key.LCtrl
        Key.LShift
        Key.Left
        Key.NumLock
        Key.OpenBrace
        Key.PageDown
        Key.PageUp
        Key.Period
        Key.RCtrl
        Key.RShift
        Key.Right
        Key.ScrollLock
        Key.Semicolon
        Key.Slash
        Key.Space
        Key.Tab
        Key.Tilde
        Key.Up
        Key.A
        Key.B
        Key.C
        Key.D
        Key.E
        Key.F
        Key.G
        Key.H
        Key.I
        Key.J
        Key.K
        Key.L
        Key.M
        Key.N
        Key.O
        Key.P
        Key.Q
        Key.R
        Key.S
        Key.T
        Key.U
        Key.V
        Key.W
        Key.X
        Key.Y
        Key.Z
        Key.D1
        Key.D2
        Key.D3
        Key.D4
        Key.D5
        Key.D6
        Key.D7
        Key.D8
        Key.D9
        Key.D0
        Key.NumPad1
        Key.NumPad2
        Key.NumPad3
        Key.NumPad4
        Key.NumPad5
        Key.NumPad6
        Key.NumPad7
        Key.NumPad8
        Key.NumPad9
        Key.NumPad0
        Key.NumPadEnter
        Key.Add
        Key.Decimal
        Key.Divide
        Key.Multiply
        Key.Subtract
    
    Note: Keys D0-D9 refer to the row of numbers above the letter keys and
    below the function keys, while NumPad0-NumPad9 refer to the numbers on the
    numeric keypad.

keyboard.capsLock [read-only]
keyboard.numLock [read-only]
keyboard.scrollLock [read-only]

    Gets the state of the corresponding lock key.  true if the lock is on,
    false if not.

keyboard.clearQueue()

    Removes all keys from the keyboard queue.  If another key is not pressed
    in the interim, the next getKey() will return Key.None.

keyboard.getKey()

    Gets the next key in the keyboard queue, or Key.None if the queue is empty.

keyboard.isPressed(key);

    Returns true if the user is currently pressing the specified key.  `key`
    should be a member of the Key enumeration.

keyboard.keyChar(key, shifted)

    Gets the character that would be generated if a specified key is pressed.
    For example, Key.A becomes "a" (or "A" if shifted).  `shifted` specifies
    whether to assume the Shift key is pressed.


Graphics API
------------

Unlike in Sphere 1.x, in second-generation games all rendering, both 2D and 3D,
is done through the Galileo API.  Galileo represents a more modern, polygon-
based approach to graphics.  Scenes are built from groups of Shape object which
represent graphics primitives (triangle strips, fans, etc.).

Color.Red [read-only]
Color.Green [read-only]
Color.Blue [read-only]
Color.Transparent [read-only]
etc...

    Gets a copy of a predefined color.  The entire X11 color set is provided,
    giving you access to such colors as `DodgerBlue` and `Chartreuse` in
    addition to the standard red, green, blue, yellow, etc.

    Each of these is an accessor which returns a new Color object every time
    it is invoked.  This ensures that code like what's shown below won't cause
    undesirable side effects:

        var color = Color.Red;
        color.blue = 255;  // we needed magenta instead

	The downside to this is that e.g. `Color.Red === Color.Red` evaluates to
	false, but this is rarely an issue in practice.

Color.mix(color1, color2[, w1, w2]);

    Calculates a weighted average of two colors.  `w1` and `w2` are optional
    and specify the relative weights of `color1` and `color2` respectively.  If
    the weights are omitted, the mix is 50/50.

Color.of(name);

    Returns a Color object from `name`, which can either be the name of a
    predefined X11 color without spaces (e.g. "chartreuse"), or an ARGB
    signature such as "#800000FF".  If `name` cannot be resolved to a color,
    throws a TypeError.

new Color(red, green, blue[, alpha]);

    Constructs a new Color object.  Color objects are used to specify the color
    of elements such as vertices and primitives.  Color components should be in
    the range [0.0-1.0] and out-of-range values will be silently clamped.
    `alpha` specifies opacity and defaults to 1.0 if not provided.

Color#name [read-only]

    Gets the name of the Color according to its component values such that
    Color.of(color.name) will give back a Color with the same values.  Useful
    for saving and reading back colors from save files.

Color#r [read/write]
Color#g [read/write]
Color#b [read/write]
Color#a [read/write]

    Gets or sets the individual components of the color.  Values outside the
    range of [0-1] are accepted, but the engine will automatically clamp them
    during rendering.

Color#clone();

    Returns a copy of this Color object.  Changes to the clone will not affect
    the original object.

Color#fade(alpha);

    Scales this color's alpha channel by `alpha`, between 0.0 and 1.0, and
    returns the result.  The red, green, and blue components are not modified.
    This is useful when you need to make a predefined color translucent, for
    instance:

        var translucentBlue = Color.Blue.fade(0.5);

new Image(filename);

    Constructs a new Image object from an image file.  An Image cannot be
    rendered directly and must instead be used as a texture for a Shape object.

    Note that Images are read-only.  If you need a writable image, you should
    use a Surface object instead.

new Image(width, height, pixels);

    Constructs a new Image from a pixel buffer.  `width` and `height` specify
    the size of the image, and `pixels` is an ArrayBuffer containing the RGBA
    pixel data to use to initialize the image.  The pixel data should not be
    padded (i.e. stride is equal to width).
    
    An error is thrown if the ArrayBuffer doesn't contain enough pixel data to
    describe the entire image.

Image#width [read-only]
Image#height [read-only]

    Gets the width or height of the image, in pixels.

Shader.Default [read-only]

    Gets the default Galileo shader program.  This is a very barebones shader
    which uses screen coordinates for vertices and performs only basic texture
    mapping.

new Shader(options);

    Constructs a Shader from a set of shader sources.  `options` should be an
    object with the following properties:

        options.vertex

            The name of the file containing source code for the GLSL vertex
            shader.

        options.fragment

            The name of the file containing source code for the GLSL fragment
            shader.

    Note that HLSL (DirectX) shaders are not supported, even on Windows.

ShapeType [enumeration]

    Specifies the type of graphics primitive represented by a Shape object.
    Can be one of the following:
    
        ShapeType.Auto
        ShapeType.Fan
        ShapeType.Lines
        ShapeType.LineLoop
        ShapeType.LineStrip
        ShapeType.Points
        ShapeType.Triangles
        ShapeType.TriStrip

new Shape(vertices[, texture[, type]]);

    Constructs a primitive shape out of the provided array of vertices textured
    with the Image specified by `texture`.

    Each vertex can have the following properties:

        vertex.x, vertex.y

            The location of the vertex.  The final location of each vertex can
            be modified by using a transformation matrix (see Matrix above).

        vertex.u, vertex.v

            The texture coordinates of the vertex.  This is used to control
            which part of the texture will be applied to this vertex.  If u/v
            is not provided for a vertex, it will be assumed to be have its u/v
            at (0, 0).

        vertex.color

            The color of the vertex.  The vertex colors will be multiplied with
            texture pixels to determine the final color of each pixel in a
            shape.

    `type` specifies the type of primitive (see ShapeType above).  If `type` is
    ShapeType.Auto (the default), the type is determined automatically based on
    the number of vertices.

Shape#texture [read/write]

    The Image to use when texturing the shape. This can be null, in which case
    the vertex colors alone will determine the shape's appearance.

Shape#draw(surface[, transform]);

    Draws the shape.  `transform` is the Transform to use, and `surface` is the
    Surface to draw on.  If `surface` is omitted, the shape is drawn on the
    backbuffer.

new ShapeGroup(shapes[, shader]);

    Constructs a ShapeGroup out of the provided array of Shape objects.
    `shader` is the Shader to use when rendering the group.  See below for more
    information on shaders.

    When a ShapeGroup is created, its transformation matrix is set to the
    identity matrix.  If `shader` is not provided, the default shader program
    will be used (see `Shader.Default`).

ShapeGroup#shader [read/write]

    Gets or sets the Shader to use when drawing this group.

ShapeGroup#transform [read/write]

    Gets or sets the transformation matrix to use when drawing this group.

ShapeGroup#draw(surface);

    Draws the group on `surface`. Any transformations defined for the group
    (see below) are applied as if the entire group were a single primitive.

ShapeGroup#setFloat(name, value);
ShapeGroup#setInt(name, value);
ShapeGroup#setMatrix(name, transform);

    Sets the value of a GLSL uniform.  When the group is drawn, if its shader
    program contains a uniform called `name` of the proper type, the value will
    be uploaded to that uniform.  It is safe to call this even if the uniform
    turns out not to exist (in which case the call is effectively a no-op).

new Surface(width, height[, fill_color]);

    Constructs a new surface with the specified width and height, optionally
    filled with 'fill_color'.  If a fill color is not provided, the created
    surface will be filled with transparent pixels.
    
    Surfaces are meant to used as render targets from drawing operations.  This
    enables static elements of a scene, such as a HUD, to be rendered in
    advance, potentially improving performance.

new Surface(filename);

    Constructs a new Surface whose initial contents are taken from the
    specified image file.

Surface#width [read-only]
Surface#height [read-only]

    Gets the width and height of the surface, in pixels.

Surface#toImage();

    Creates an Image from the current contents of this Surface and returns it.
    Note that drawing to the surface afterwards will not affect the generated
    image, which is read-only.

new Transform();

    Constructs a transformation matrix.  The object represents a 4x4 matrix
    and is initialized to identity.

Transform#identity();

    Re-initializes this matrix as an identity matrix.

Transform#compose(otherMatrix);

    Composes this transform with another.  `otherMatrix` is multiplied from the
    left such that transformations are performed in the order you specify.

Transform#rotate(theta[, vx, vy, vz]);

    Applies a rotation transformation to this matrix.  `theta` is the angle of
    rotation, in radians.  (vx, vy, vz) is the vector to rotate about.  For
    example the default is (0, 0, 1) which rotates about the Z axis.

Transform#scale(sx, sy);

    Applies a scaling transformation to this matrix.  `sx` and `sy` are the
    horizontal and vertical scaling factors, respectively.

Transform#translate(tx, ty);

    Applies a translation transformation to this matrix.  `tx` and `ty` are the
    horizontal and vertical translations, respectively.


Fonts and Text Rendering
------------------------

A common task in a game engine, at some point you will probably want to get
text on the screen.  In minisphere, you use a Font object to do this.

Font.Default [read-only]

    Gets the engine default font.  This is the same font used for the FPS
    counter and other system output.

new Font(filename);

    Constructs a Font object from a font file.  Currently only Sphere 1.x RFN
    format is supported.

Font#height [read-only]

    Gets the line height, in pixels, for text rendered using this font.

Font:drawText(surface, x, y, text[, color[, wrap_width]]);

    Renders `text` to the specified surface at (x,y).  `color` defaults to
    Color.White if not provided, and `wrap_width` specifies the width in which
    to constrain the text.  If `wrap_width` is not provided, no wrapping is
    performed.

Font:getStringHeight(string, wrap_width);

    Gets the height, in pixels, of the string when it is rendered using
    Font:drawText(), passing `wrap_width`.

Font:getStringWidth(string);

    Gets the width, in pixels, of `string` when it is rendered using this font.

Font:wordWrap(text, wrap_width);

    Wraps `text` as if it were drawn with Font#drawText() using the specified
    wrap width.  Returns an array of strings, representing the lines in the
    wrapped text.
    
    When drawing large amounts of word-wrapped text every frame, for example in
    a text box, this function should be used to pre-wrap the text since
    performing wrapping calculations every frame can get expensive.


Audialis Sound Routines
-----------------------

Playing sounds and music are both handled in minisphere by Audialis, the
evolution of Sphere 1.x's audio subsystem.  Audialis allows you to create mixers
which can be used to adjust certain parameters across all sounds associated with
that mixer.  This is useful for implementing global volume controls, for
example.

Mixer.Default [read-only]

    Gets the default Audialis audio mixer.  The default mixer outputs 44.1 kHz
    16-bit stereo sound, i.e. CD quality.

new Mixer(frequency, bits[, channels]);

    Constructs a new Mixer object.  Any sounds played through the mixer will use
    the format specified by the parameters above.  `frequency` is the sample
    rate, `bits` specifies the bit depth (allowed values are 8, 16 and 24), and
    `channels` is the number of channels, ranging [1-7].  Channel counts of 5 or
    higher imply an additional LFE channel (i.e. 5.1, 6.1, 7.1).

    Do note that this creates a _hardware_ mixer.  If the requested format is
    not supported by the system, an error will be thrown ("unable to create
    hardware voice").

Mixer#volume [read/write]

    Gets or sets the output volume of the mixer.  This will affect the volume
    of any sounds played through the mixer.

new Sound(filename);

    Constructs a Sound object from the specified audio file.  Supported sound
    formats are Ogg Vorbis (.ogg), WAV, MOD, S3M, IT, and FLAC.  minisphere
    does not support mp3 or MIDI.

Sound#length [read-only]

    Gets the length of the sound in microseconds.

Sound#pan [read/write]

    Gets or sets the current pan (balance). 0.0 is dead center, -1.0 is full
    left, and 1.0 is full right.

Sound#playing [read-only]

    true if the sound is currently playing, false otherwise.

Sound#position [read/write]

    Gets or sets the playback position within the sound, in seconds.

Sound#repeat [read/write]

    Gets or sets whether the sound will automatically repeat when it reaches
    the end.

Sound#speed [read/write]

    Gets the current playback speed of the sound.  1.0 is normal, 2.0 is double
    speed, etc.  Note that changing the playback speed affects the pitch as
    well.

Sound#volume [read/write]

    Gets or sets the current volume of the sound.  0.0 is silent, 1.0 is full
    volume.  Higher values are allowed, but may introduce distortion due to
    clipping.

Sound#pause();

    Pauses the sound.  If it is already paused, this has no effect.

Sound#play([mixer]);

    Begins or resumes sound playback.  When called with no `mixer` argument,
    Sound#play() will resume playback for a paused sound.  Otherwise, the sound
    is started from the beginning on the specified mixer.

Sound#stop();

    Stops the sound.  Playback position will be reset to the beginning (0.0s),
    even if the sound was not playing.

new SoundStream([frequency[, bits[, channels]]]);

    Constructs a sound stream, which plays arbitrary sound data provided by the
    game at runtime.  This may be used, for example, to generate sound
    procedurally or add support for an unsupported audio format in script.
    `frequency` specifies the stream's sample rate and 'channels' the number of
    audio channels, ranging [1-7].  Channel counts of 5 and higher imply an
    additional LFE (subwoofer) channel.

    The default stream format is 8-bit 22050Hz with 1 channel.

SoundStream#bufferSize [read-only]

    Gets the total number of samples in the stream's buffer.

SoundStream#buffer(data);

    Writes audio data to the stream buffer.  `data` is an ArrayBuffer,
    TypedArray or DataView containing the data to write.  While a stream is
    playing, audio data should be fed into it continuously to prevent skipping.

SoundStream#pause();

    Pauses playback of the stream.  Has no effect if the stream is already
    paused.

SoundStream#play([mixer]);

    Starts the stream playing, or if no mixer is specified, resumes a paused
    stream.  Before beginning playback, it is recommended to pre-buffer some
    audio into the stream (see SoundStream:buffer() below).  This will minimize
    the risk of a buffer underrun and subsequent skipping during playback.

SoundStream#stop();

    Stops playback of the stream and frees its buffer.  This should be called
    when you are done using a stream.  The stream may be reused after a stop()
    call, but you will have to feed new audio data.


File Streams
------------

FileStreams are used to directly work with binary data in files.  They are an
evolution of the RawFile object in Sphere 1.x.

new FileStream(filename, mode);

    Constructs a new FileStream from the specified file.  `mode` is a string in
    the same format as that of C fopen() specifying how to open the file:

        r:  Open file for reading.
        r+: Open file for update (reading and writing).
        w:  Create/truncate then open file for writing.
        w+: Create/truncate then open file for update.
        a:  Open file (create if not found) with file position at end of file.
        a+: Open file for update with initial position at end of file.

    A valid mode must be provided, otherwise stream construction will fail and
    throw an error.

FileStream#position [read/write]

    Gets or sets the file position, which determines where in the file the next
    read or write will start from.  Expressed in bytes.

    Note: For files opened for writing, it is valid to seek past the end of the
    stream.  In this case the next write will be at the new position and the
    intervening space filled with NUL bytes.

FileStream#size [read-only]

    Gets the size of the underlying file, in bytes.

FileStream#close();

    Closes the stream, after which the FileStream object should not be used.
    Attempting to read or write to a stream after it is closed will throw an
    error.

FileStream#read([num_bytes]);

    Reads data from the file, up to the specified number of bytes, and returns
    it as an ArrayBuffer.  As a convenience, `num_bytes` can be omitted to read
    the entire file without affecting the file position.  The file must be
    opened for reading.

FileStream#readFloat([little_endian]);
FileStream#readDouble([little_endian]);

    Reads a floating point value from the file and advances the file pointer.
    `little_endian` is optional and defaults to false.

FileStream#readInt([size[, little_endian]]);
FileStream#readUInt([size[, little_endian]]);

    Reads a signed or unsigned integer from the file and advances the file
    pointer.  `size` is an integer [1-6] and specifies the size in bytes of the
    value to read.  This allows integer values of up to 48 bits to be read.

FileStream#readPString(lenSize[, little_endian]);

    Reads a length-prefixed (Pascal) string from the file.  `lenSize` specifies
    the number of bytes [1-4] used to encode the string length.  `little_endian`
    is optional and defaults to false.

FileStream#readString([num_bytes]);

    Reads a fixed-length string from the file.  `num_bytes` specifies how many
    bytes to read and can be omitted to read the entire file at once without
    affecting the file pointer.

    Note: Strings in minisphere are UTF-8 encoded.  As a result, the number of
          bytes in a string may not match the number of characters.

FileStream#write(data);

    Writes data to the file and advances the file pointer.  `data` should be an
    ArrayBuffer, TypedArray or DataView containing the data to be written.

FileStream#writeFloat(value[, little_endian]);
FileStream#writeDouble(value[, little_endian]);

    Writes a floating point value to the file and advances the file pointer.
    `little_endian` is optional and defaults to false.

FileStream#writeInt(value[, size[, little_endian]]);
FileStream#writeUInt(value[, size[, little_endian]]);

    Writes a signed or unsigned integer to the file and advances the file
    pointer.  `size` is an integer [1-6] and specifies the size in bytes of the
    value to write.  This allows integer values of up to 48 bits to be written.

    Note: If `value` is too large or small to be represented in `size` bytes,
          this method will throw a TypeError.

FileStream#writePString(string, lenSize[, little_endian]);

    Writes a UTF-8-encoded, length-prefixed (Pascal-style) string to the file
    and advances the file pointer.  `lenSize` specifies the number of bytes [1-4]
    used to encode the string length.  `little_endian` is optional and defaults
    to false.

    Note: If the string is too long for its length to be encoded in `lenSize`
          bytes, this method will throw a TypeError.

FileStream#writeString(string);

    Writes a UTF-8-encoded string to the file and advances the file pointer.


Networking (Sockets)
--------------------

minisphere includes an advanced sockets API which is more flexible than the one
Sphere provides.  The old routines are still available, but should be considered
deprecated.  Under minisphere, sockets are divided into two types: Listening
sockets, used for servers, and I/O sockets, for clients.

new Server(port[, backlog_size]);

    Constructs a new server to listen for connections on the specified port.
    `backlog_size` specifies the size of the backlog. If the backlog fills, new
    connections will be dropped.

Server#accept();

    If one or more connections are waiting in the backlog, accepts one of them
    and returns a Socket object representing the connection.  Otherwise,
    returns null.  This should be called regularly to prevent the backlog from
    filling up.

Server#close();

    Shuts down the server.  Any connections in the backlog will be dropped and
    no new connections can be made unless a new Server is created.

new Socket(hostname, port);

    Connects to `hostname` on `port` and constructs an Socket representing the
    connection.  The hostname can either be a named address (e.g. google.com)
    or an IP address (e.g. 127.0.0.1).  As this operation is non-blocking, a
    Socket object will be returned even if the connection can be not be made;
    you must poll Socket#connected to find out when the connection has opened.

Socket#bytesPending;

    Gets the amount of data, in bytes, currently in the receive buffer.  Call
    Socket#read() to retrieve this data.

Socket#connected [read-only]

    Gets whether the connection has been established.  As long as this returns
    false, you cannot call any other methods on the socket object.  Doing so
    will cause an error to be thrown.

Socket#remoteAddress [read-only]

    Gets the IP address of the upstream end of the socket.  Throws an error if
    accessed before a connection has been established.

Socket#remotePort [read-only]

    Gets the port that the remote machine is using for the connection.
    Generally not a useful statistic, but it's there if you need it.  Throws an
    error if accessed before a connection is established.

Socket#close();

    Disconnects the socket.  Note that any given Socket object is tied to a
    specific session and so cannot be reused after it has been closed.

Socket#read(num_bytes);

    Reads up to `num_bytes` bytes from the socket and returns an ArrayBuffer
    containing the data received.  This method is non-blocking: If more bytes
    are requested than are available, only the available data will be returned.

Socket#write(data);

    Writes data to the socket, which can be read at the other end.  `data` can
    be either an ArrayBuffer, TypedArray view, or DataView.
